{ DiagnosticCode: 
   { error_TS_0_1: 'error TS{0}: {1}',
     warning_TS_0_1: 'warning TS{0}: {1}',
     Unrecognized_escape_sequence: 'Unrecognized escape sequence.',
     Unexpected_character_0: 'Unexpected character {0}.',
     Missing_close_quote_character: 'Missing close quote character.',
     Identifier_expected: 'Identifier expected.',
     _0_keyword_expected: '\'{0}\' keyword expected.',
     _0_expected: '\'{0}\' expected.',
     Identifier_expected_0_is_a_keyword: 'Identifier expected; \'{0}\' is a keyword.',
     Automatic_semicolon_insertion_not_allowed: 'Automatic semicolon insertion not allowed.',
     Unexpected_token_0_expected: 'Unexpected token; \'{0}\' expected.',
     Trailing_comma_not_allowed: 'Trailing comma not allowed.',
     AsteriskSlash_expected: '\'*/\' expected.',
     public_or_private_modifier_must_precede_static: '\'public\' or \'private\' modifier must precede \'static\'.',
     Unexpected_token: 'Unexpected token.',
     Catch_clause_parameter_cannot_have_a_type_annotation: 'Catch clause parameter cannot have a type annotation.',
     A_rest_parameter_must_be_last_in_a_parameter_list: 'A rest parameter must be last in a parameter list.',
     Parameter_cannot_have_question_mark_and_initializer: 'Parameter cannot have question mark and initializer.',
     A_required_parameter_cannot_follow_an_optional_parameter: 'A required parameter cannot follow an optional parameter.',
     Index_signatures_cannot_have_rest_parameters: 'Index signatures cannot have rest parameters.',
     Index_signature_parameter_cannot_have_accessibility_modifiers: 'Index signature parameter cannot have accessibility modifiers.',
     Index_signature_parameter_cannot_have_a_question_mark: 'Index signature parameter cannot have a question mark.',
     Index_signature_parameter_cannot_have_an_initializer: 'Index signature parameter cannot have an initializer.',
     Index_signature_must_have_a_type_annotation: 'Index signature must have a type annotation.',
     Index_signature_parameter_must_have_a_type_annotation: 'Index signature parameter must have a type annotation.',
     Index_signature_parameter_type_must_be_string_or_number: 'Index signature parameter type must be \'string\' or \'number\'.',
     extends_clause_already_seen: '\'extends\' clause already seen.',
     extends_clause_must_precede_implements_clause: '\'extends\' clause must precede \'implements\' clause.',
     Classes_can_only_extend_a_single_class: 'Classes can only extend a single class.',
     implements_clause_already_seen: '\'implements\' clause already seen.',
     Accessibility_modifier_already_seen: 'Accessibility modifier already seen.',
     _0_modifier_must_precede_1_modifier: '\'{0}\' modifier must precede \'{1}\' modifier.',
     _0_modifier_already_seen: '\'{0}\' modifier already seen.',
     _0_modifier_cannot_appear_on_a_class_element: '\'{0}\' modifier cannot appear on a class element.',
     Interface_declaration_cannot_have_implements_clause: 'Interface declaration cannot have \'implements\' clause.',
     super_invocation_cannot_have_type_arguments: '\'super\' invocation cannot have type arguments.',
     Only_ambient_modules_can_use_quoted_names: 'Only ambient modules can use quoted names.',
     Statements_are_not_allowed_in_ambient_contexts: 'Statements are not allowed in ambient contexts.',
     A_function_implementation_cannot_be_declared_in_an_ambient_context: 'A function implementation cannot be declared in an ambient context.',
     A_declare_modifier_cannot_be_used_in_an_already_ambient_context: 'A \'declare\' modifier cannot be used in an already ambient context.',
     Initializers_are_not_allowed_in_ambient_contexts: 'Initializers are not allowed in ambient contexts.',
     _0_modifier_cannot_appear_on_a_module_element: '\'{0}\' modifier cannot appear on a module element.',
     A_declare_modifier_cannot_be_used_with_an_interface_declaration: 'A \'declare\' modifier cannot be used with an interface declaration.',
     A_declare_modifier_is_required_for_a_top_level_declaration_in_a_d_ts_file: 'A \'declare\' modifier is required for a top level declaration in a .d.ts file.',
     A_rest_parameter_cannot_be_optional: 'A rest parameter cannot be optional.',
     A_rest_parameter_cannot_have_an_initializer: 'A rest parameter cannot have an initializer.',
     set_accessor_must_have_exactly_one_parameter: '\'set\' accessor must have exactly one parameter.',
     set_accessor_parameter_cannot_be_optional: '\'set\' accessor parameter cannot be optional.',
     set_accessor_parameter_cannot_have_an_initializer: '\'set\' accessor parameter cannot have an initializer.',
     set_accessor_cannot_have_rest_parameter: '\'set\' accessor cannot have rest parameter.',
     get_accessor_cannot_have_parameters: '\'get\' accessor cannot have parameters.',
     Modifiers_cannot_appear_here: 'Modifiers cannot appear here.',
     Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher: 'Accessors are only available when targeting ECMAScript 5 and higher.',
     Enum_member_must_have_initializer: 'Enum member must have initializer.',
     Export_assignment_cannot_be_used_in_internal_modules: 'Export assignment cannot be used in internal modules.',
     Ambient_enum_elements_can_only_have_integer_literal_initializers: 'Ambient enum elements can only have integer literal initializers.',
     module_class_interface_enum_import_or_statement: 'module, class, interface, enum, import or statement',
     constructor_function_accessor_or_variable: 'constructor, function, accessor or variable',
     statement: 'statement',
     case_or_default_clause: 'case or default clause',
     identifier: 'identifier',
     call_construct_index_property_or_function_signature: 'call, construct, index, property or function signature',
     expression: 'expression',
     type_name: 'type name',
     property_or_accessor: 'property or accessor',
     parameter: 'parameter',
     type: 'type',
     type_parameter: 'type parameter',
     A_declare_modifier_cannot_be_used_with_an_import_declaration: 'A \'declare\' modifier cannot be used with an import declaration.',
     Invalid_reference_directive_syntax: 'Invalid \'reference\' directive syntax.',
     Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher: 'Octal literals are not available when targeting ECMAScript 5 and higher.',
     Accessors_are_not_allowed_in_ambient_contexts: 'Accessors are not allowed in ambient contexts.',
     _0_modifier_cannot_appear_on_a_constructor_declaration: '\'{0}\' modifier cannot appear on a constructor declaration.',
     _0_modifier_cannot_appear_on_a_parameter: '\'{0}\' modifier cannot appear on a parameter.',
     Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement: 'Only a single variable declaration is allowed in a \'for...in\' statement.',
     Type_parameters_cannot_appear_on_a_constructor_declaration: 'Type parameters cannot appear on a constructor declaration.',
     Type_annotation_cannot_appear_on_a_constructor_declaration: 'Type annotation cannot appear on a constructor declaration.',
     Type_parameters_cannot_appear_on_an_accessor: 'Type parameters cannot appear on an accessor.',
     Type_annotation_cannot_appear_on_a_set_accessor: 'Type annotation cannot appear on a \'set\' accessor.',
     Index_signature_must_have_exactly_one_parameter: 'Index signature must have exactly one parameter.',
     _0_list_cannot_be_empty: '\'{0}\' list cannot be empty.',
     variable_declaration: 'variable declaration',
     type_argument: 'type argument',
     Invalid_use_of_0_in_strict_mode: 'Invalid use of \'{0}\' in strict mode.',
     with_statements_are_not_allowed_in_strict_mode: '\'with\' statements are not allowed in strict mode.',
     delete_cannot_be_called_on_an_identifier_in_strict_mode: '\'delete\' cannot be called on an identifier in strict mode.',
     Invalid_left_hand_side_in_for_in_statement: 'Invalid left-hand side in \'for...in\' statement.',
     continue_statement_can_only_be_used_within_an_enclosing_iteration_statement: '\'continue\' statement can only be used within an enclosing iteration statement.',
     break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement: '\'break\' statement can only be used within an enclosing iteration or switch statement.',
     Jump_target_not_found: 'Jump target not found.',
     Jump_target_cannot_cross_function_boundary: 'Jump target cannot cross function boundary.',
     return_statement_must_be_contained_within_a_function_body: '\'return\' statement must be contained within a function body.',
     Expression_expected: 'Expression expected.',
     Type_expected: 'Type expected.',
     Duplicate_identifier_0: 'Duplicate identifier \'{0}\'.',
     The_name_0_does_not_exist_in_the_current_scope: 'The name \'{0}\' does not exist in the current scope.',
     The_name_0_does_not_refer_to_a_value: 'The name \'{0}\' does not refer to a value.',
     super_can_only_be_used_inside_a_class_instance_method: '\'super\' can only be used inside a class instance method.',
     The_left_hand_side_of_an_assignment_expression_must_be_a_variable_property_or_indexer: 'The left-hand side of an assignment expression must be a variable, property or indexer.',
     Value_of_type_0_is_not_callable_Did_you_mean_to_include_new: 'Value of type \'{0}\' is not callable. Did you mean to include \'new\'?',
     Value_of_type_0_is_not_callable: 'Value of type \'{0}\' is not callable.',
     Value_of_type_0_is_not_newable: 'Value of type \'{0}\' is not newable.',
     An_index_expression_argument_must_be_string_number_or_any: 'An index expression argument must be \'string\', \'number\', or \'any\'.',
     Operator_0_cannot_be_applied_to_types_1_and_2: 'Operator \'{0}\' cannot be applied to types \'{1}\' and \'{2}\'.',
     Type_0_is_not_assignable_to_type_1: 'Type \'{0}\' is not assignable to type \'{1}\'.',
     Type_0_is_not_assignable_to_type_1_NL_2: 'Type \'{0}\' is not assignable to type \'{1}\':{NL}{2}',
     Expected_var_class_interface_or_module: 'Expected var, class, interface, or module.',
     Getter_0_already_declared: 'Getter \'{0}\' already declared.',
     Setter_0_already_declared: 'Setter \'{0}\' already declared.',
     Exported_class_0_extends_private_class_1: 'Exported class \'{0}\' extends private class \'{1}\'.',
     Exported_class_0_implements_private_interface_1: 'Exported class \'{0}\' implements private interface \'{1}\'.',
     Exported_interface_0_extends_private_interface_1: 'Exported interface \'{0}\' extends private interface \'{1}\'.',
     Exported_class_0_extends_class_from_inaccessible_module_1: 'Exported class \'{0}\' extends class from inaccessible module {1}.',
     Exported_class_0_implements_interface_from_inaccessible_module_1: 'Exported class \'{0}\' implements interface from inaccessible module {1}.',
     Exported_interface_0_extends_interface_from_inaccessible_module_1: 'Exported interface \'{0}\' extends interface from inaccessible module {1}.',
     Public_static_property_0_of_exported_class_has_or_is_using_private_type_1: 'Public static property \'{0}\' of exported class has or is using private type \'{1}\'.',
     Public_property_0_of_exported_class_has_or_is_using_private_type_1: 'Public property \'{0}\' of exported class has or is using private type \'{1}\'.',
     Property_0_of_exported_interface_has_or_is_using_private_type_1: 'Property \'{0}\' of exported interface has or is using private type \'{1}\'.',
     Exported_variable_0_has_or_is_using_private_type_1: 'Exported variable \'{0}\' has or is using private type \'{1}\'.',
     Public_static_property_0_of_exported_class_is_using_inaccessible_module_1: 'Public static property \'{0}\' of exported class is using inaccessible module {1}.',
     Public_property_0_of_exported_class_is_using_inaccessible_module_1: 'Public property \'{0}\' of exported class is using inaccessible module {1}.',
     Property_0_of_exported_interface_is_using_inaccessible_module_1: 'Property \'{0}\' of exported interface is using inaccessible module {1}.',
     Exported_variable_0_is_using_inaccessible_module_1: 'Exported variable \'{0}\' is using inaccessible module {1}.',
     Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_type_1: 'Parameter \'{0}\' of constructor from exported class has or is using private type \'{1}\'.',
     Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_private_type_1: 'Parameter \'{0}\' of public static property setter from exported class has or is using private type \'{1}\'.',
     Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_private_type_1: 'Parameter \'{0}\' of public property setter from exported class has or is using private type \'{1}\'.',
     Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_type_1: 'Parameter \'{0}\' of constructor signature from exported interface has or is using private type \'{1}\'.',
     Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_type_1: 'Parameter \'{0}\' of call signature from exported interface has or is using private type \'{1}\'.',
     Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_type_1: 'Parameter \'{0}\' of public static method from exported class has or is using private type \'{1}\'.',
     Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_type_1: 'Parameter \'{0}\' of public method from exported class has or is using private type \'{1}\'.',
     Parameter_0_of_method_from_exported_interface_has_or_is_using_private_type_1: 'Parameter \'{0}\' of method from exported interface has or is using private type \'{1}\'.',
     Parameter_0_of_exported_function_has_or_is_using_private_type_1: 'Parameter \'{0}\' of exported function has or is using private type \'{1}\'.',
     Parameter_0_of_constructor_from_exported_class_is_using_inaccessible_module_1: 'Parameter \'{0}\' of constructor from exported class is using inaccessible module {1}.',
     Parameter_0_of_public_static_property_setter_from_exported_class_is_using_inaccessible_module_1: 'Parameter \'{0}\' of public static property setter from exported class is using inaccessible module {1}.',
     Parameter_0_of_public_property_setter_from_exported_class_is_using_inaccessible_module_1: 'Parameter \'{0}\' of public property setter from exported class is using inaccessible module {1}.',
     Parameter_0_of_constructor_signature_from_exported_interface_is_using_inaccessible_module_1: 'Parameter \'{0}\' of constructor signature from exported interface is using inaccessible module {1}.',
     Parameter_0_of_call_signature_from_exported_interface_is_using_inaccessible_module_1: 'Parameter \'{0}\' of call signature from exported interface is using inaccessible module {1}',
     Parameter_0_of_public_static_method_from_exported_class_is_using_inaccessible_module_1: 'Parameter \'{0}\' of public static method from exported class is using inaccessible module {1}.',
     Parameter_0_of_public_method_from_exported_class_is_using_inaccessible_module_1: 'Parameter \'{0}\' of public method from exported class is using inaccessible module {1}.',
     Parameter_0_of_method_from_exported_interface_is_using_inaccessible_module_1: 'Parameter \'{0}\' of method from exported interface is using inaccessible module {1}.',
     Parameter_0_of_exported_function_is_using_inaccessible_module_1: 'Parameter \'{0}\' of exported function is using inaccessible module {1}.',
     Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_type_0: 'Return type of public static property getter from exported class has or is using private type \'{0}\'.',
     Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_type_0: 'Return type of public property getter from exported class has or is using private type \'{0}\'.',
     Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_type_0: 'Return type of constructor signature from exported interface has or is using private type \'{0}\'.',
     Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_type_0: 'Return type of call signature from exported interface has or is using private type \'{0}\'.',
     Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_type_0: 'Return type of index signature from exported interface has or is using private type \'{0}\'.',
     Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_type_0: 'Return type of public static method from exported class has or is using private type \'{0}\'.',
     Return_type_of_public_method_from_exported_class_has_or_is_using_private_type_0: 'Return type of public method from exported class has or is using private type \'{0}\'.',
     Return_type_of_method_from_exported_interface_has_or_is_using_private_type_0: 'Return type of method from exported interface has or is using private type \'{0}\'.',
     Return_type_of_exported_function_has_or_is_using_private_type_0: 'Return type of exported function has or is using private type \'{0}\'.',
     Return_type_of_public_static_property_getter_from_exported_class_is_using_inaccessible_module_0: 'Return type of public static property getter from exported class is using inaccessible module {0}.',
     Return_type_of_public_property_getter_from_exported_class_is_using_inaccessible_module_0: 'Return type of public property getter from exported class is using inaccessible module {0}.',
     Return_type_of_constructor_signature_from_exported_interface_is_using_inaccessible_module_0: 'Return type of constructor signature from exported interface is using inaccessible module {0}.',
     Return_type_of_call_signature_from_exported_interface_is_using_inaccessible_module_0: 'Return type of call signature from exported interface is using inaccessible module {0}.',
     Return_type_of_index_signature_from_exported_interface_is_using_inaccessible_module_0: 'Return type of index signature from exported interface is using inaccessible module {0}.',
     Return_type_of_public_static_method_from_exported_class_is_using_inaccessible_module_0: 'Return type of public static method from exported class is using inaccessible module {0}.',
     Return_type_of_public_method_from_exported_class_is_using_inaccessible_module_0: 'Return type of public method from exported class is using inaccessible module {0}.',
     Return_type_of_method_from_exported_interface_is_using_inaccessible_module_0: 'Return type of method from exported interface is using inaccessible module {0}.',
     Return_type_of_exported_function_is_using_inaccessible_module_0: 'Return type of exported function is using inaccessible module {0}.',
     new_T_cannot_be_used_to_create_an_array_Use_new_Array_T_instead: '\'new T[]\' cannot be used to create an array. Use \'new Array<T>()\' instead.',
     A_parameter_list_must_follow_a_generic_type_argument_list_expected: 'A parameter list must follow a generic type argument list. \'(\' expected.',
     Multiple_constructor_implementations_are_not_allowed: 'Multiple constructor implementations are not allowed.',
     Cannot_find_external_module_0: 'Cannot find external module \'{0}\'.',
     Module_cannot_be_aliased_to_a_non_module_type: 'Module cannot be aliased to a non-module type.',
     A_class_may_only_extend_another_class: 'A class may only extend another class.',
     A_class_may_only_implement_another_class_or_interface: 'A class may only implement another class or interface.',
     An_interface_may_only_extend_a_class_or_another_interface: 'An interface may only extend a class or another interface.',
     Unable_to_resolve_type: 'Unable to resolve type.',
     Unable_to_resolve_type_of_0: 'Unable to resolve type of \'{0}\'.',
     Unable_to_resolve_type_parameter_constraint: 'Unable to resolve type parameter constraint.',
     Type_parameter_constraint_cannot_be_a_primitive_type: 'Type parameter constraint cannot be a primitive type.',
     Supplied_parameters_do_not_match_any_signature_of_call_target: 'Supplied parameters do not match any signature of call target.',
     Supplied_parameters_do_not_match_any_signature_of_call_target_NL_0: 'Supplied parameters do not match any signature of call target:{NL}{0}',
     Cannot_use_new_with_an_expression_whose_type_lacks_a_signature: 'Cannot use \'new\' with an expression whose type lacks a signature.',
     Only_a_void_function_can_be_called_with_the_new_keyword: 'Only a void function can be called with the \'new\' keyword.',
     Could_not_select_overload_for_new_expression: 'Could not select overload for \'new\' expression.',
     Type_0_does_not_satisfy_the_constraint_1: 'Type \'{0}\' does not satisfy the constraint \'{1}\'.',
     Could_not_select_overload_for_call_expression: 'Could not select overload for \'call\' expression.',
     Cannot_invoke_an_expression_whose_type_lacks_a_call_signature: 'Cannot invoke an expression whose type lacks a call signature.',
     Calls_to_super_are_only_valid_inside_a_class: 'Calls to \'super\' are only valid inside a class.',
     Generic_type_0_requires_1_type_argument_s: 'Generic type \'{0}\' requires {1} type argument(s).',
     Type_of_array_literal_cannot_be_determined_Best_common_type_could_not_be_found_for_array_elements: 'Type of array literal cannot be determined. Best common type could not be found for array elements.',
     Could_not_find_enclosing_symbol_for_dotted_name_0: 'Could not find enclosing symbol for dotted name \'{0}\'.',
     Property_0_does_not_exist_on_value_of_type_1: 'Property \'{0}\' does not exist on value of type \'{1}\'.',
     Cannot_find_name_0: 'Cannot find name \'{0}\'.',
     get_and_set_accessor_must_have_the_same_type: '\'get\' and \'set\' accessor must have the same type.',
     this_cannot_be_referenced_in_current_location: '\'this\' cannot be referenced in current location.',
     Static_members_cannot_reference_class_type_parameters: 'Static members cannot reference class type parameters.',
     Type_0_recursively_references_itself_as_a_base_type: 'Type \'{0}\' recursively references itself as a base type.',
     super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class: '\'super\' property access is permitted only in a constructor, member function, or member accessor of a derived class.',
     super_can_only_be_referenced_in_a_derived_class: '\'super\' can only be referenced in a derived class.',
     A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_properties_or_has_parameter_properties: 'A \'super\' call must be the first statement in the constructor when a class contains initialized properties or has parameter properties.',
     Constructors_for_derived_classes_must_contain_a_super_call: 'Constructors for derived classes must contain a \'super\' call.',
     Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors: 'Super calls are not permitted outside constructors or in nested functions inside constructors.',
     _0_1_is_inaccessible: '\'{0}.{1}\' is inaccessible.',
     this_cannot_be_referenced_in_a_module_body: '\'this\' cannot be referenced in a module body.',
     Invalid_expression_types_not_known_to_support_the_addition_operator: 'Invalid \'+\' expression - types not known to support the addition operator.',
     The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type: 'The right-hand side of an arithmetic operation must be of type \'any\', \'number\' or an enum type.',
     The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type: 'The left-hand side of an arithmetic operation must be of type \'any\', \'number\' or an enum type.',
     An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type: 'An arithmetic operand must be of type \'any\', \'number\' or an enum type.',
     Variable_declarations_of_a_for_statement_cannot_use_a_type_annotation: 'Variable declarations of a \'for\' statement cannot use a type annotation.',
     Variable_declarations_of_a_for_statement_must_be_of_types_string_or_any: 'Variable declarations of a \'for\' statement must be of types \'string\' or \'any\'.',
     The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter: 'The right-hand side of a \'for...in\' statement must be of type \'any\', an object type or a type parameter.',
     The_left_hand_side_of_an_in_expression_must_be_of_types_any_string_or_number: 'The left-hand side of an \'in\' expression must be of types \'any\', \'string\' or \'number\'.',
     The_right_hand_side_of_an_in_expression_must_be_of_type_any_an_object_type_or_a_type_parameter: 'The right-hand side of an \'in\' expression must be of type \'any\', an object type or a type parameter.',
     The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter: 'The left-hand side of an \'instanceof\' expression must be of type \'any\', an object type or a type parameter.',
     The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type: 'The right-hand side of an \'instanceof\' expression must be of type \'any\' or of a type assignable to the \'Function\' interface type.',
     Setters_cannot_return_a_value: 'Setters cannot return a value.',
     Tried_to_query_type_of_uninitialized_module_0: 'Tried to query type of uninitialized module \'{0}\'.',
     Tried_to_set_variable_type_to_uninitialized_module_type_0: 'Tried to set variable type to uninitialized module type \'{0}\'.',
     Type_0_is_not_generic: 'Type \'{0}\' is not generic.',
     Getters_must_return_a_value: 'Getters must return a value.',
     Getter_and_setter_accessors_do_not_agree_in_visibility: 'Getter and setter accessors do not agree in visibility.',
     Invalid_left_hand_side_of_assignment_expression: 'Invalid left-hand side of assignment expression.',
     Function_declared_a_non_void_return_type_but_has_no_return_expression: 'Function declared a non-void return type, but has no return expression.',
     Cannot_resolve_return_type_reference: 'Cannot resolve return type reference.',
     Constructors_cannot_have_a_return_type_of_void: 'Constructors cannot have a return type of \'void\'.',
     Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2: 'Subsequent variable declarations must have the same type.  Variable \'{0}\' must be of type \'{1}\', but here has type \'{2}\'.',
     All_symbols_within_a_with_block_will_be_resolved_to_any: 'All symbols within a with block will be resolved to \'any\'.',
     Import_declarations_in_an_internal_module_cannot_reference_an_external_module: 'Import declarations in an internal module cannot reference an external module.',
     Class_0_declares_interface_1_but_does_not_implement_it_NL_2: 'Class {0} declares interface {1} but does not implement it:{NL}{2}',
     Class_0_declares_class_1_as_an_interface_but_does_not_implement_it_NL_2: 'Class {0} declares class {1} as an interface but does not implement it:{NL}{2}',
     The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer: 'The operand of an increment or decrement operator must be a variable, property or indexer.',
     this_cannot_be_referenced_in_a_static_property_initializer: '\'this\' cannot be referenced in a static property initializer.',
     Class_0_cannot_extend_class_1_NL_2: 'Class \'{0}\' cannot extend class \'{1}\':{NL}{2}',
     Interface_0_cannot_extend_class_1_NL_2: 'Interface \'{0}\' cannot extend class \'{1}\':{NL}{2}',
     Interface_0_cannot_extend_interface_1_NL_2: 'Interface \'{0}\' cannot extend interface \'{1}\':{NL}{2}',
     Overload_signature_is_not_compatible_with_function_definition: 'Overload signature is not compatible with function definition.',
     Overload_signature_is_not_compatible_with_function_definition_NL_0: 'Overload signature is not compatible with function definition:{NL}{0}',
     Overload_signatures_must_all_be_public_or_private: 'Overload signatures must all be public or private.',
     Overload_signatures_must_all_be_exported_or_not_exported: 'Overload signatures must all be exported or not exported.',
     Overload_signatures_must_all_be_ambient_or_non_ambient: 'Overload signatures must all be ambient or non-ambient.',
     Overload_signatures_must_all_be_optional_or_required: 'Overload signatures must all be optional or required.',
     Specialized_overload_signature_is_not_assignable_to_any_non_specialized_signature: 'Specialized overload signature is not assignable to any non-specialized signature.',
     this_cannot_be_referenced_in_constructor_arguments: '\'this\' cannot be referenced in constructor arguments.',
     Instance_member_cannot_be_accessed_off_a_class: 'Instance member cannot be accessed off a class.',
     Untyped_function_calls_may_not_accept_type_arguments: 'Untyped function calls may not accept type arguments.',
     Non_generic_functions_may_not_accept_type_arguments: 'Non-generic functions may not accept type arguments.',
     A_generic_type_may_not_reference_itself_with_a_wrapped_form_of_its_own_type_parameters: 'A generic type may not reference itself with a wrapped form of its own type parameters.',
     A_rest_parameter_must_be_of_an_array_type: 'A rest parameter must be of an array type.',
     Overload_signature_implementation_cannot_use_specialized_type: 'Overload signature implementation cannot use specialized type.',
     Export_assignments_may_only_be_used_at_the_top_level_of_external_modules: 'Export assignments may only be used at the top-level of external modules.',
     Export_assignments_may_only_be_made_with_variables_functions_classes_interfaces_enums_and_internal_modules: 'Export assignments may only be made with variables, functions, classes, interfaces, enums and internal modules.',
     Only_public_methods_of_the_base_class_are_accessible_via_the_super_keyword: 'Only public methods of the base class are accessible via the \'super\' keyword.',
     Numeric_indexer_type_0_must_be_assignable_to_string_indexer_type_1: 'Numeric indexer type \'{0}\' must be assignable to string indexer type \'{1}\'.',
     Numeric_indexer_type_0_must_be_assignable_to_string_indexer_type_1_NL_2: 'Numeric indexer type \'{0}\' must be assignable to string indexer type \'{1}\':{NL}{2}',
     All_numerically_named_properties_must_be_assignable_to_numeric_indexer_type_0: 'All numerically named properties must be assignable to numeric indexer type \'{0}\'.',
     All_numerically_named_properties_must_be_assignable_to_numeric_indexer_type_0_NL_1: 'All numerically named properties must be assignable to numeric indexer type \'{0}\':{NL}{1}',
     All_named_properties_must_be_assignable_to_string_indexer_type_0: 'All named properties must be assignable to string indexer type \'{0}\'.',
     All_named_properties_must_be_assignable_to_string_indexer_type_0_NL_1: 'All named properties must be assignable to string indexer type \'{0}\':{NL}{1}',
     A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation: 'A parameter initializer is only allowed in a function or constructor implementation.',
     Function_expression_declared_a_non_void_return_type_but_has_no_return_expression: 'Function expression declared a non-void return type, but has no return expression.',
     Import_declaration_referencing_identifier_from_internal_module_can_only_be_made_with_variables_functions_classes_interfaces_enums_and_internal_modules: 'Import declaration referencing identifier from internal module can only be made with variables, functions, classes, interfaces, enums and internal modules.',
     Module_0_has_no_exported_member_1: 'Module \'{0}\' has no exported member \'{1}\'.',
     Unable_to_resolve_module_reference_0: 'Unable to resolve module reference \'{0}\'.',
     Could_not_find_module_0_in_module_1: 'Could not find module \'{0}\' in module \'{1}\'.',
     Exported_import_declaration_0_is_assigned_value_with_type_that_has_or_is_using_private_type_1: 'Exported import declaration \'{0}\' is assigned value with type that has or is using private type \'{1}\'.',
     Exported_import_declaration_0_is_assigned_value_with_type_that_is_using_inaccessible_module_1: 'Exported import declaration \'{0}\' is assigned value with type that is using inaccessible module \'{1}\'.',
     Exported_import_declaration_0_is_assigned_type_that_has_or_is_using_private_type_1: 'Exported import declaration \'{0}\' is assigned type that has or is using private type \'{1}\'.',
     Exported_import_declaration_0_is_assigned_type_that_is_using_inaccessible_module_1: 'Exported import declaration \'{0}\' is assigned type that is using inaccessible module \'{1}\'.',
     Exported_import_declaration_0_is_assigned_container_that_is_or_is_using_inaccessible_module_1: 'Exported import declaration \'{0}\' is assigned container that is or is using inaccessible module \'{1}\'.',
     Type_name_0_in_extends_clause_does_not_reference_constructor_function_for_1: 'Type name \'{0}\' in extends clause does not reference constructor function for \'{1}\'.',
     Internal_module_reference_0_in_import_declaration_does_not_reference_module_instance_for_1: 'Internal module reference \'{0}\' in import declaration does not reference module instance for \'{1}\'.',
     Module_0_cannot_merge_with_previous_declaration_of_1_in_a_different_file_2: 'Module \'{0}\' cannot merge with previous declaration of \'{1}\' in a different file \'{2}\'.',
     Interface_0_cannot_simultaneously_extend_types_1_and_2_NL_3: 'Interface \'{0}\' cannot simultaneously extend types \'{1}\' and \'{2}\':{NL}{3}',
     Initializer_of_parameter_0_cannot_reference_identifier_1_declared_after_it: 'Initializer of parameter \'{0}\' cannot reference identifier \'{1}\' declared after it.',
     Ambient_external_module_declaration_cannot_be_reopened: 'Ambient external module declaration cannot be reopened.',
     All_declarations_of_merged_declaration_0_must_be_exported_or_not_exported: 'All declarations of merged declaration \'{0}\' must be exported or not exported.',
     super_cannot_be_referenced_in_constructor_arguments: '\'super\' cannot be referenced in constructor arguments.',
     Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class: 'Return type of constructor signature must be assignable to the instance type of the class.',
     Ambient_external_module_declaration_must_be_defined_in_global_context: 'Ambient external module declaration must be defined in global context.',
     Ambient_external_module_declaration_cannot_specify_relative_module_name: 'Ambient external module declaration cannot specify relative module name.',
     Import_declaration_in_an_ambient_external_module_declaration_cannot_reference_external_module_through_relative_external_module_name: 'Import declaration in an ambient external module declaration cannot reference external module through relative external module name.',
     No_best_common_type_exists_among_return_expressions: 'No best common type exists among return expressions.',
     Import_declaration_cannot_refer_to_external_module_reference_when_noResolve_option_is_set: 'Import declaration cannot refer to external module reference when --noResolve option is set.',
     Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference: 'Duplicate identifier \'_this\'. Compiler uses variable declaration \'_this\' to capture \'this\' reference.',
     Duplicate_identifier_super_Compiler_uses_super_to_capture_base_class_reference: 'Duplicate identifier \'_super\'. Compiler uses \'_super\' to capture base class reference.',
     Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference: 'Expression resolves to variable declaration \'_this\' that compiler uses to capture \'this\' reference.',
     Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference: 'Expression resolves to \'_super\' that compiler uses to capture base class reference.',
     TypeParameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_type_1: 'TypeParameter \'{0}\' of constructor signature from exported interface has or is using private type \'{1}\'.',
     TypeParameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_type_1: 'TypeParameter \'{0}\' of call signature from exported interface has or is using private type \'{1}\'.',
     TypeParameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_type_1: 'TypeParameter \'{0}\' of public static method from exported class has or is using private type \'{1}\'.',
     TypeParameter_0_of_public_method_from_exported_class_has_or_is_using_private_type_1: 'TypeParameter \'{0}\' of public method from exported class has or is using private type \'{1}\'.',
     TypeParameter_0_of_method_from_exported_interface_has_or_is_using_private_type_1: 'TypeParameter \'{0}\' of method from exported interface has or is using private type \'{1}\'.',
     TypeParameter_0_of_exported_function_has_or_is_using_private_type_1: 'TypeParameter \'{0}\' of exported function has or is using private type \'{1}\'.',
     TypeParameter_0_of_constructor_signature_from_exported_interface_is_using_inaccessible_module_1: 'TypeParameter \'{0}\' of constructor signature from exported interface is using inaccessible module {1}.',
     TypeParameter_0_of_call_signature_from_exported_interface_is_using_inaccessible_module_1: 'TypeParameter \'{0}\' of call signature from exported interface is using inaccessible module {1}',
     TypeParameter_0_of_public_static_method_from_exported_class_is_using_inaccessible_module_1: 'TypeParameter \'{0}\' of public static method from exported class is using inaccessible module {1}.',
     TypeParameter_0_of_public_method_from_exported_class_is_using_inaccessible_module_1: 'TypeParameter \'{0}\' of public method from exported class is using inaccessible module {1}.',
     TypeParameter_0_of_method_from_exported_interface_is_using_inaccessible_module_1: 'TypeParameter \'{0}\' of method from exported interface is using inaccessible module {1}.',
     TypeParameter_0_of_exported_function_is_using_inaccessible_module_1: 'TypeParameter \'{0}\' of exported function is using inaccessible module {1}.',
     TypeParameter_0_of_exported_class_has_or_is_using_private_type_1: 'TypeParameter \'{0}\' of exported class has or is using private type \'{1}\'.',
     TypeParameter_0_of_exported_interface_has_or_is_using_private_type_1: 'TypeParameter \'{0}\' of exported interface has or is using private type \'{1}\'.',
     TypeParameter_0_of_exported_class_is_using_inaccessible_module_1: 'TypeParameter \'{0}\' of exported class is using inaccessible module {1}.',
     TypeParameter_0_of_exported_interface_is_using_inaccessible_module_1: 'TypeParameter \'{0}\' of exported interface is using inaccessible module {1}.',
     Duplicate_identifier_i_Compiler_uses_i_to_initialize_rest_parameter: 'Duplicate identifier \'_i\'. Compiler uses \'_i\' to initialize rest parameter.',
     Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters: 'Duplicate identifier \'arguments\'. Compiler uses \'arguments\' to initialize rest parameters.',
     No_best_common_type_exists_between_0_and_1: 'No best common type exists between \'{0}\' and \'{1}\'.',
     No_best_common_type_exists_between_0_1_and_2: 'No best common type exists between \'{0}\', \'{1}\', and \'{2}\'.',
     Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_an_external_module: 'Duplicate identifier \'{0}\'. Compiler reserves name \'{1}\' in top level scope of an external module.',
     Constraint_of_a_type_parameter_cannot_reference_any_type_parameter_from_the_same_type_parameter_list: 'Constraint of a type parameter cannot reference any type parameter from the same type parameter list.',
     Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor: 'Initializer of instance member variable \'{0}\' cannot reference identifier \'{1}\' declared in the constructor.',
     Parameter_0_cannot_be_referenced_in_its_initializer: 'Parameter \'{0}\' cannot be referenced in its initializer.',
     Duplicate_string_index_signature: 'Duplicate string index signature.',
     Duplicate_number_index_signature: 'Duplicate number index signature.',
     All_declarations_of_an_interface_must_have_identical_type_parameters: 'All declarations of an interface must have identical type parameters.',
     Expression_resolves_to_variable_declaration_i_that_compiler_uses_to_initialize_rest_parameter: 'Expression resolves to variable declaration \'_i\' that compiler uses to initialize rest parameter.',
     Neither_type_0_nor_type_1_is_assignable_to_the_other: 'Neither type \'{0}\' nor type \'{1}\' is assignable to the other.',
     Neither_type_0_nor_type_1_is_assignable_to_the_other_NL_2: 'Neither type \'{0}\' nor type \'{1}\' is assignable to the other:{NL}{2}',
     Duplicate_function_implementation: 'Duplicate function implementation.',
     Function_implementation_expected: 'Function implementation expected.',
     Function_overload_name_must_be_0: 'Function overload name must be \'{0}\'.',
     Constructor_implementation_expected: 'Constructor implementation expected.',
     Class_name_cannot_be_0: 'Class name cannot be \'{0}\'.',
     Interface_name_cannot_be_0: 'Interface name cannot be \'{0}\'.',
     Enum_name_cannot_be_0: 'Enum name cannot be \'{0}\'.',
     A_module_cannot_have_multiple_export_assignments: 'A module cannot have multiple export assignments.',
     Export_assignment_not_allowed_in_module_with_exported_element: 'Export assignment not allowed in module with exported element.',
     A_parameter_property_is_only_allowed_in_a_constructor_implementation: 'A parameter property is only allowed in a constructor implementation.',
     Function_overload_must_be_static: 'Function overload must be static.',
     Function_overload_must_not_be_static: 'Function overload must not be static.',
     Type_0_is_missing_property_1_from_type_2: 'Type \'{0}\' is missing property \'{1}\' from type \'{2}\'.',
     Types_of_property_0_of_types_1_and_2_are_incompatible: 'Types of property \'{0}\' of types \'{1}\' and \'{2}\' are incompatible.',
     Types_of_property_0_of_types_1_and_2_are_incompatible_NL_3: 'Types of property \'{0}\' of types \'{1}\' and \'{2}\' are incompatible:{NL}{3}',
     Property_0_defined_as_private_in_type_1_is_defined_as_public_in_type_2: 'Property \'{0}\' defined as private in type \'{1}\' is defined as public in type \'{2}\'.',
     Property_0_defined_as_public_in_type_1_is_defined_as_private_in_type_2: 'Property \'{0}\' defined as public in type \'{1}\' is defined as private in type \'{2}\'.',
     Types_0_and_1_define_property_2_as_private: 'Types \'{0}\' and \'{1}\' define property \'{2}\' as private.',
     Call_signatures_of_types_0_and_1_are_incompatible: 'Call signatures of types \'{0}\' and \'{1}\' are incompatible.',
     Call_signatures_of_types_0_and_1_are_incompatible_NL_2: 'Call signatures of types \'{0}\' and \'{1}\' are incompatible:{NL}{2}',
     Type_0_requires_a_call_signature_but_type_1_lacks_one: 'Type \'{0}\' requires a call signature, but type \'{1}\' lacks one.',
     Construct_signatures_of_types_0_and_1_are_incompatible: 'Construct signatures of types \'{0}\' and \'{1}\' are incompatible.',
     Construct_signatures_of_types_0_and_1_are_incompatible_NL_2: 'Construct signatures of types \'{0}\' and \'{1}\' are incompatible:{NL}{2}',
     Type_0_requires_a_construct_signature_but_type_1_lacks_one: 'Type \'{0}\' requires a construct signature, but type \'{1}\' lacks one.',
     Index_signatures_of_types_0_and_1_are_incompatible: 'Index signatures of types \'{0}\' and \'{1}\' are incompatible.',
     Index_signatures_of_types_0_and_1_are_incompatible_NL_2: 'Index signatures of types \'{0}\' and \'{1}\' are incompatible:{NL}{2}',
     Call_signature_expects_0_or_fewer_parameters: 'Call signature expects {0} or fewer parameters.',
     Could_not_apply_type_0_to_argument_1_which_is_of_type_2: 'Could not apply type \'{0}\' to argument {1} which is of type \'{2}\'.',
     Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function: 'Class \'{0}\' defines instance member accessor \'{1}\', but extended class \'{2}\' defines it as instance member function.',
     Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function: 'Class \'{0}\' defines instance member property \'{1}\', but extended class \'{2}\' defines it as instance member function.',
     Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor: 'Class \'{0}\' defines instance member function \'{1}\', but extended class \'{2}\' defines it as instance member accessor.',
     Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_property: 'Class \'{0}\' defines instance member function \'{1}\', but extended class \'{2}\' defines it as instance member property.',
     Types_of_static_property_0_of_class_1_and_class_2_are_incompatible: 'Types of static property \'{0}\' of class \'{1}\' and class \'{2}\' are incompatible.',
     Types_of_static_property_0_of_class_1_and_class_2_are_incompatible_NL_3: 'Types of static property \'{0}\' of class \'{1}\' and class \'{2}\' are incompatible:{NL}{3}',
     Type_reference_cannot_refer_to_container_0: 'Type reference cannot refer to container \'{0}\'.',
     Type_reference_must_refer_to_type: 'Type reference must refer to type.',
     In_enums_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_the_first_enum_element: 'In enums with multiple declarations only one declaration can omit an initializer for the first enum element.',
     _0_overload_s: ' (+ {0} overload(s))',
     Variable_declaration_cannot_have_the_same_name_as_an_import_declaration: 'Variable declaration cannot have the same name as an import declaration.',
     Signature_expected_0_type_arguments_got_1_instead: 'Signature expected {0} type arguments, got {1} instead.',
     Property_0_defined_as_optional_in_type_1_but_is_required_in_type_2: 'Property \'{0}\' defined as optional in type \'{1}\', but is required in type \'{2}\'.',
     Types_0_and_1_originating_in_infinitely_expanding_type_reference_do_not_refer_to_same_named_type: 'Types \'{0}\' and \'{1}\' originating in infinitely expanding type reference do not refer to same named type.',
     Types_0_and_1_originating_in_infinitely_expanding_type_reference_have_incompatible_type_arguments: 'Types \'{0}\' and \'{1}\' originating in infinitely expanding type reference have incompatible type arguments.',
     Types_0_and_1_originating_in_infinitely_expanding_type_reference_have_incompatible_type_arguments_NL_2: 'Types \'{0}\' and \'{1}\' originating in infinitely expanding type reference have incompatible type arguments:{NL}{2}',
     Named_properties_0_of_types_1_and_2_are_not_identical: 'Named properties \'{0}\' of types \'{1}\' and \'{2}\' are not identical.',
     Types_of_string_indexer_of_types_0_and_1_are_not_identical: 'Types of string indexer of types \'{0}\' and \'{1}\' are not identical.',
     Types_of_number_indexer_of_types_0_and_1_are_not_identical: 'Types of number indexer of types \'{0}\' and \'{1}\' are not identical.',
     Type_of_number_indexer_in_type_0_is_not_assignable_to_string_indexer_type_in_type_1_NL_2: 'Type of number indexer in type \'{0}\' is not assignable to string indexer type in type \'{1}\'.{NL}{2}',
     Type_of_property_0_in_type_1_is_not_assignable_to_string_indexer_type_in_type_2_NL_3: 'Type of property \'{0}\' in type \'{1}\' is not assignable to string indexer type in type \'{2}\'.{NL}{3}',
     Type_of_property_0_in_type_1_is_not_assignable_to_number_indexer_type_in_type_2_NL_3: 'Type of property \'{0}\' in type \'{1}\' is not assignable to number indexer type in type \'{2}\'.{NL}{3}',
     Static_property_0_defined_as_private_in_type_1_is_defined_as_public_in_type_2: 'Static property \'{0}\' defined as private in type \'{1}\' is defined as public in type \'{2}\'.',
     Static_property_0_defined_as_public_in_type_1_is_defined_as_private_in_type_2: 'Static property \'{0}\' defined as public in type \'{1}\' is defined as private in type \'{2}\'.',
     Types_0_and_1_define_static_property_2_as_private: 'Types \'{0}\' and \'{1}\' define static property \'{2}\' as private.',
     Current_host_does_not_support_0_option: 'Current host does not support \'{0}\' option.',
     ECMAScript_target_version_0_not_supported_Specify_a_valid_target_version_1_default_or_2: 'ECMAScript target version \'{0}\' not supported.  Specify a valid target version: \'{1}\' (default), or \'{2}\'',
     Argument_for_0_option_must_be_1_or_2: 'Argument for \'{0}\' option must be \'{1}\' or \'{2}\'',
     Could_not_find_file_0: 'Could not find file: \'{0}\'.',
     A_file_cannot_have_a_reference_to_itself: 'A file cannot have a reference to itself.',
     Cannot_resolve_referenced_file_0: 'Cannot resolve referenced file: \'{0}\'.',
     Cannot_find_the_common_subdirectory_path_for_the_input_files: 'Cannot find the common subdirectory path for the input files.',
     Emit_Error_0: 'Emit Error: {0}.',
     Cannot_read_file_0_1: 'Cannot read file \'{0}\': {1}',
     Unsupported_file_encoding: 'Unsupported file encoding.',
     Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1: 'Locale must be of the form <language> or <language>-<territory>. For example \'{0}\' or \'{1}\'.',
     Unsupported_locale_0: 'Unsupported locale: \'{0}\'.',
     Execution_Failed_NL: 'Execution Failed.{NL}',
     Invalid_call_to_up: 'Invalid call to \'up\'',
     Invalid_call_to_down: 'Invalid call to \'down\'',
     Base64_value_0_finished_with_a_continuation_bit: 'Base64 value \'{0}\' finished with a continuation bit.',
     Unknown_compiler_option_0: 'Unknown compiler option \'{0}\'',
     Expected_0_arguments_to_message_got_1_instead: 'Expected {0} arguments to message, got {1} instead.',
     Expected_the_message_0_to_have_1_arguments_but_it_had_2: 'Expected the message \'{0}\' to have {1} arguments, but it had {2}',
     Could_not_delete_file_0: 'Could not delete file \'{0}\'',
     Could_not_create_directory_0: 'Could not create directory \'{0}\'',
     Error_while_executing_file_0: 'Error while executing file \'{0}\': ',
     Cannot_compile_external_modules_unless_the_module_flag_is_provided: 'Cannot compile external modules unless the \'--module\' flag is provided.',
     Option_mapRoot_cannot_be_specified_without_specifying_sourcemap_option: 'Option mapRoot cannot be specified without specifying sourcemap option.',
     Option_sourceRoot_cannot_be_specified_without_specifying_sourcemap_option: 'Option sourceRoot cannot be specified without specifying sourcemap option.',
     Options_mapRoot_and_sourceRoot_cannot_be_specified_without_specifying_sourcemap_option: 'Options mapRoot and sourceRoot cannot be specified without specifying sourcemap option.',
     Option_0_specified_without_1: 'Option \'{0}\' specified without \'{1}\'',
     codepage_option_not_supported_on_current_platform: '\'codepage\' option not supported on current platform.',
     Concatenate_and_emit_output_to_single_file: 'Concatenate and emit output to single file.',
     Generates_corresponding_0_file: 'Generates corresponding {0} file.',
     Specifies_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations: 'Specifies the location where debugger should locate map files instead of generated locations.',
     Specifies_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations: 'Specifies the location where debugger should locate TypeScript files instead of source locations.',
     Watch_input_files: 'Watch input files.',
     Redirect_output_structure_to_the_directory: 'Redirect output structure to the directory.',
     Do_not_emit_comments_to_output: 'Do not emit comments to output.',
     Skip_resolution_and_preprocessing: 'Skip resolution and preprocessing.',
     Specify_ECMAScript_target_version_0_default_or_1: 'Specify ECMAScript target version: \'{0}\' (default), or \'{1}\'',
     Specify_module_code_generation_0_or_1: 'Specify module code generation: \'{0}\' or \'{1}\'',
     Print_this_message: 'Print this message.',
     Print_the_compiler_s_version_0: 'Print the compiler\'s version: {0}',
     Allow_use_of_deprecated_0_keyword_when_referencing_an_external_module: 'Allow use of deprecated \'{0}\' keyword when referencing an external module.',
     Specify_locale_for_errors_and_messages_For_example_0_or_1: 'Specify locale for errors and messages. For example \'{0}\' or \'{1}\'',
     Syntax_0: 'Syntax:   {0}',
     options: 'options',
     file1: 'file',
     Examples: 'Examples:',
     Options: 'Options:',
     Insert_command_line_options_and_files_from_a_file: 'Insert command line options and files from a file.',
     Version_0: 'Version {0}',
     Use_the_0_flag_to_see_options: 'Use the \'{0}\' flag to see options.',
     NL_Recompiling_0: '{NL}Recompiling ({0}):',
     STRING: 'STRING',
     KIND: 'KIND',
     file2: 'FILE',
     VERSION: 'VERSION',
     LOCATION: 'LOCATION',
     DIRECTORY: 'DIRECTORY',
     NUMBER: 'NUMBER',
     Specify_the_codepage_to_use_when_opening_source_files: 'Specify the codepage to use when opening source files.',
     Additional_locations: 'Additional locations:',
     This_version_of_the_Javascript_runtime_does_not_support_the_0_function: 'This version of the Javascript runtime does not support the \'{0}\' function.',
     Unknown_rule: 'Unknown rule.',
     Invalid_line_number_0: 'Invalid line number ({0})',
     Warn_on_expressions_and_declarations_with_an_implied_any_type: 'Warn on expressions and declarations with an implied \'any\' type.',
     Variable_0_implicitly_has_an_any_type: 'Variable \'{0}\' implicitly has an \'any\' type.',
     Parameter_0_of_1_implicitly_has_an_any_type: 'Parameter \'{0}\' of \'{1}\' implicitly has an \'any\' type.',
     Parameter_0_of_function_type_implicitly_has_an_any_type: 'Parameter \'{0}\' of function type implicitly has an \'any\' type.',
     Member_0_of_object_type_implicitly_has_an_any_type: 'Member \'{0}\' of object type implicitly has an \'any\' type.',
     new_expression_which_lacks_a_constructor_signature_implicitly_has_an_any_type: '\'new\' expression, which lacks a constructor signature, implicitly has an \'any\' type.',
     _0_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: '\'{0}\', which lacks return-type annotation, implicitly has an \'any\' return type.',
     Function_expression_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: 'Function expression, which lacks return-type annotation, implicitly has an \'any\' return type.',
     Parameter_0_of_lambda_function_implicitly_has_an_any_type: 'Parameter \'{0}\' of lambda function implicitly has an \'any\' type.',
     Constructor_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: 'Constructor signature, which lacks return-type annotation, implicitly has an \'any\' return type.',
     Lambda_Function_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: 'Lambda Function, which lacks return-type annotation, implicitly has an \'any\' return type.',
     Array_Literal_implicitly_has_an_any_type_from_widening: 'Array Literal implicitly has an \'any\' type from widening.',
     _0_which_lacks_get_accessor_and_parameter_type_annotation_on_set_accessor_implicitly_has_an_any_type: '\'{0}\', which lacks \'get\' accessor and parameter type annotation on \'set\' accessor, implicitly has an \'any\' type.',
     Index_signature_of_object_type_implicitly_has_an_any_type: 'Index signature of object type implicitly has an \'any\' type.',
     Object_literal_s_property_0_implicitly_has_an_any_type_from_widening: 'Object literal\'s property \'{0}\' implicitly has an \'any\' type from widening.' },
  DiagnosticCategory: 
   { '0': 'Warning',
     '1': 'Error',
     '2': 'Message',
     '3': 'NoPrefix',
     Warning: 0,
     Error: 1,
     Message: 2,
     NoPrefix: 3 },
  diagnosticInformationMap: 
   { 'error TS{0}: {1}': { code: 0, category: 3 },
     'warning TS{0}: {1}': { code: 1, category: 3 },
     'Unrecognized escape sequence.': { code: 1000, category: 1 },
     'Unexpected character {0}.': { code: 1001, category: 1 },
     'Missing close quote character.': { code: 1002, category: 1 },
     'Identifier expected.': { code: 1003, category: 1 },
     '\'{0}\' keyword expected.': { code: 1004, category: 1 },
     '\'{0}\' expected.': { code: 1005, category: 1 },
     'Identifier expected; \'{0}\' is a keyword.': { code: 1006, category: 1 },
     'Automatic semicolon insertion not allowed.': { code: 1007, category: 1 },
     'Unexpected token; \'{0}\' expected.': { code: 1008, category: 1 },
     'Trailing comma not allowed.': { code: 1009, category: 1 },
     '\'*/\' expected.': { code: 1010, category: 1 },
     '\'public\' or \'private\' modifier must precede \'static\'.': { code: 1011, category: 1 },
     'Unexpected token.': { code: 1012, category: 1 },
     'Catch clause parameter cannot have a type annotation.': { code: 1013, category: 1 },
     'A rest parameter must be last in a parameter list.': { code: 1014, category: 1 },
     'Parameter cannot have question mark and initializer.': { code: 1015, category: 1 },
     'A required parameter cannot follow an optional parameter.': { code: 1016, category: 1 },
     'Index signatures cannot have rest parameters.': { code: 1017, category: 1 },
     'Index signature parameter cannot have accessibility modifiers.': { code: 1018, category: 1 },
     'Index signature parameter cannot have a question mark.': { code: 1019, category: 1 },
     'Index signature parameter cannot have an initializer.': { code: 1020, category: 1 },
     'Index signature must have a type annotation.': { code: 1021, category: 1 },
     'Index signature parameter must have a type annotation.': { code: 1022, category: 1 },
     'Index signature parameter type must be \'string\' or \'number\'.': { code: 1023, category: 1 },
     '\'extends\' clause already seen.': { code: 1024, category: 1 },
     '\'extends\' clause must precede \'implements\' clause.': { code: 1025, category: 1 },
     'Classes can only extend a single class.': { code: 1026, category: 1 },
     '\'implements\' clause already seen.': { code: 1027, category: 1 },
     'Accessibility modifier already seen.': { code: 1028, category: 1 },
     '\'{0}\' modifier must precede \'{1}\' modifier.': { code: 1029, category: 1 },
     '\'{0}\' modifier already seen.': { code: 1030, category: 1 },
     '\'{0}\' modifier cannot appear on a class element.': { code: 1031, category: 1 },
     'Interface declaration cannot have \'implements\' clause.': { code: 1032, category: 1 },
     '\'super\' invocation cannot have type arguments.': { code: 1034, category: 1 },
     'Only ambient modules can use quoted names.': { code: 1035, category: 1 },
     'Statements are not allowed in ambient contexts.': { code: 1036, category: 1 },
     'A function implementation cannot be declared in an ambient context.': { code: 1037, category: 1 },
     'A \'declare\' modifier cannot be used in an already ambient context.': { code: 1038, category: 1 },
     'Initializers are not allowed in ambient contexts.': { code: 1039, category: 1 },
     '\'{0}\' modifier cannot appear on a module element.': { code: 1044, category: 1 },
     'A \'declare\' modifier cannot be used with an interface declaration.': { code: 1045, category: 1 },
     'A \'declare\' modifier is required for a top level declaration in a .d.ts file.': { code: 1046, category: 1 },
     'A rest parameter cannot be optional.': { code: 1047, category: 1 },
     'A rest parameter cannot have an initializer.': { code: 1048, category: 1 },
     '\'set\' accessor must have exactly one parameter.': { code: 1049, category: 1 },
     '\'set\' accessor parameter cannot be optional.': { code: 1051, category: 1 },
     '\'set\' accessor parameter cannot have an initializer.': { code: 1052, category: 1 },
     '\'set\' accessor cannot have rest parameter.': { code: 1053, category: 1 },
     '\'get\' accessor cannot have parameters.': { code: 1054, category: 1 },
     'Modifiers cannot appear here.': { code: 1055, category: 1 },
     'Accessors are only available when targeting ECMAScript 5 and higher.': { code: 1056, category: 1 },
     'Enum member must have initializer.': { code: 1061, category: 1 },
     'Export assignment cannot be used in internal modules.': { code: 1063, category: 1 },
     'Ambient enum elements can only have integer literal initializers.': { code: 1066, category: 1 },
     'module, class, interface, enum, import or statement': { code: 1067, category: 3 },
     'constructor, function, accessor or variable': { code: 1068, category: 3 },
     statement: { code: 1069, category: 3 },
     'case or default clause': { code: 1070, category: 3 },
     identifier: { code: 1071, category: 3 },
     'call, construct, index, property or function signature': { code: 1072, category: 3 },
     expression: { code: 1073, category: 3 },
     'type name': { code: 1074, category: 3 },
     'property or accessor': { code: 1075, category: 3 },
     parameter: { code: 1076, category: 3 },
     type: { code: 1077, category: 3 },
     'type parameter': { code: 1078, category: 3 },
     'A \'declare\' modifier cannot be used with an import declaration.': { code: 1079, category: 1 },
     'Invalid \'reference\' directive syntax.': { code: 1084, category: 1 },
     'Octal literals are not available when targeting ECMAScript 5 and higher.': { code: 1085, category: 1 },
     'Accessors are not allowed in ambient contexts.': { code: 1086, category: 1 },
     '\'{0}\' modifier cannot appear on a constructor declaration.': { code: 1089, category: 1 },
     '\'{0}\' modifier cannot appear on a parameter.': { code: 1090, category: 1 },
     'Only a single variable declaration is allowed in a \'for...in\' statement.': { code: 1091, category: 1 },
     'Type parameters cannot appear on a constructor declaration.': { code: 1092, category: 1 },
     'Type annotation cannot appear on a constructor declaration.': { code: 1093, category: 1 },
     'Type parameters cannot appear on an accessor.': { code: 1094, category: 1 },
     'Type annotation cannot appear on a \'set\' accessor.': { code: 1095, category: 1 },
     'Index signature must have exactly one parameter.': { code: 1096, category: 1 },
     '\'{0}\' list cannot be empty.': { code: 1097, category: 1 },
     'variable declaration': { code: 1098, category: 3 },
     'type argument': { code: 1099, category: 3 },
     'Invalid use of \'{0}\' in strict mode.': { code: 1100, category: 1 },
     '\'with\' statements are not allowed in strict mode.': { code: 1101, category: 1 },
     '\'delete\' cannot be called on an identifier in strict mode.': { code: 1102, category: 1 },
     'Invalid left-hand side in \'for...in\' statement.': { code: 1103, category: 1 },
     '\'continue\' statement can only be used within an enclosing iteration statement.': { code: 1104, category: 1 },
     '\'break\' statement can only be used within an enclosing iteration or switch statement.': { code: 1105, category: 1 },
     'Jump target not found.': { code: 1106, category: 1 },
     'Jump target cannot cross function boundary.': { code: 1107, category: 1 },
     '\'return\' statement must be contained within a function body.': { code: 1108, category: 1 },
     'Expression expected.': { code: 1109, category: 1 },
     'Type expected.': { code: 1110, category: 1 },
     'Duplicate identifier \'{0}\'.': { code: 2000, category: 1 },
     'The name \'{0}\' does not exist in the current scope.': { code: 2001, category: 1 },
     'The name \'{0}\' does not refer to a value.': { code: 2002, category: 1 },
     '\'super\' can only be used inside a class instance method.': { code: 2003, category: 1 },
     'The left-hand side of an assignment expression must be a variable, property or indexer.': { code: 2004, category: 1 },
     'Value of type \'{0}\' is not callable. Did you mean to include \'new\'?': { code: 2161, category: 1 },
     'Value of type \'{0}\' is not callable.': { code: 2006, category: 1 },
     'Value of type \'{0}\' is not newable.': { code: 2007, category: 1 },
     'An index expression argument must be \'string\', \'number\', or \'any\'.': { code: 2008, category: 1 },
     'Operator \'{0}\' cannot be applied to types \'{1}\' and \'{2}\'.': { code: 2009, category: 1 },
     'Type \'{0}\' is not assignable to type \'{1}\'.': { code: 2011, category: 1 },
     'Type \'{0}\' is not assignable to type \'{1}\':{NL}{2}': { code: 2012, category: 1 },
     'Expected var, class, interface, or module.': { code: 2013, category: 1 },
     'Getter \'{0}\' already declared.': { code: 2015, category: 1 },
     'Setter \'{0}\' already declared.': { code: 2016, category: 1 },
     'Exported class \'{0}\' extends private class \'{1}\'.': { code: 2018, category: 1 },
     'Exported class \'{0}\' implements private interface \'{1}\'.': { code: 2019, category: 1 },
     'Exported interface \'{0}\' extends private interface \'{1}\'.': { code: 2020, category: 1 },
     'Exported class \'{0}\' extends class from inaccessible module {1}.': { code: 2021, category: 1 },
     'Exported class \'{0}\' implements interface from inaccessible module {1}.': { code: 2022, category: 1 },
     'Exported interface \'{0}\' extends interface from inaccessible module {1}.': { code: 2023, category: 1 },
     'Public static property \'{0}\' of exported class has or is using private type \'{1}\'.': { code: 2024, category: 1 },
     'Public property \'{0}\' of exported class has or is using private type \'{1}\'.': { code: 2025, category: 1 },
     'Property \'{0}\' of exported interface has or is using private type \'{1}\'.': { code: 2026, category: 1 },
     'Exported variable \'{0}\' has or is using private type \'{1}\'.': { code: 2027, category: 1 },
     'Public static property \'{0}\' of exported class is using inaccessible module {1}.': { code: 2028, category: 1 },
     'Public property \'{0}\' of exported class is using inaccessible module {1}.': { code: 2029, category: 1 },
     'Property \'{0}\' of exported interface is using inaccessible module {1}.': { code: 2030, category: 1 },
     'Exported variable \'{0}\' is using inaccessible module {1}.': { code: 2031, category: 1 },
     'Parameter \'{0}\' of constructor from exported class has or is using private type \'{1}\'.': { code: 2032, category: 1 },
     'Parameter \'{0}\' of public static property setter from exported class has or is using private type \'{1}\'.': { code: 2033, category: 1 },
     'Parameter \'{0}\' of public property setter from exported class has or is using private type \'{1}\'.': { code: 2034, category: 1 },
     'Parameter \'{0}\' of constructor signature from exported interface has or is using private type \'{1}\'.': { code: 2035, category: 1 },
     'Parameter \'{0}\' of call signature from exported interface has or is using private type \'{1}\'.': { code: 2036, category: 1 },
     'Parameter \'{0}\' of public static method from exported class has or is using private type \'{1}\'.': { code: 2037, category: 1 },
     'Parameter \'{0}\' of public method from exported class has or is using private type \'{1}\'.': { code: 2038, category: 1 },
     'Parameter \'{0}\' of method from exported interface has or is using private type \'{1}\'.': { code: 2039, category: 1 },
     'Parameter \'{0}\' of exported function has or is using private type \'{1}\'.': { code: 2040, category: 1 },
     'Parameter \'{0}\' of constructor from exported class is using inaccessible module {1}.': { code: 2041, category: 1 },
     'Parameter \'{0}\' of public static property setter from exported class is using inaccessible module {1}.': { code: 2042, category: 1 },
     'Parameter \'{0}\' of public property setter from exported class is using inaccessible module {1}.': { code: 2043, category: 1 },
     'Parameter \'{0}\' of constructor signature from exported interface is using inaccessible module {1}.': { code: 2044, category: 1 },
     'Parameter \'{0}\' of call signature from exported interface is using inaccessible module {1}': { code: 2045, category: 1 },
     'Parameter \'{0}\' of public static method from exported class is using inaccessible module {1}.': { code: 2046, category: 1 },
     'Parameter \'{0}\' of public method from exported class is using inaccessible module {1}.': { code: 2047, category: 1 },
     'Parameter \'{0}\' of method from exported interface is using inaccessible module {1}.': { code: 2048, category: 1 },
     'Parameter \'{0}\' of exported function is using inaccessible module {1}.': { code: 2049, category: 1 },
     'Return type of public static property getter from exported class has or is using private type \'{0}\'.': { code: 2050, category: 1 },
     'Return type of public property getter from exported class has or is using private type \'{0}\'.': { code: 2051, category: 1 },
     'Return type of constructor signature from exported interface has or is using private type \'{0}\'.': { code: 2052, category: 1 },
     'Return type of call signature from exported interface has or is using private type \'{0}\'.': { code: 2053, category: 1 },
     'Return type of index signature from exported interface has or is using private type \'{0}\'.': { code: 2054, category: 1 },
     'Return type of public static method from exported class has or is using private type \'{0}\'.': { code: 2055, category: 1 },
     'Return type of public method from exported class has or is using private type \'{0}\'.': { code: 2056, category: 1 },
     'Return type of method from exported interface has or is using private type \'{0}\'.': { code: 2057, category: 1 },
     'Return type of exported function has or is using private type \'{0}\'.': { code: 2058, category: 1 },
     'Return type of public static property getter from exported class is using inaccessible module {0}.': { code: 2059, category: 1 },
     'Return type of public property getter from exported class is using inaccessible module {0}.': { code: 2060, category: 1 },
     'Return type of constructor signature from exported interface is using inaccessible module {0}.': { code: 2061, category: 1 },
     'Return type of call signature from exported interface is using inaccessible module {0}.': { code: 2062, category: 1 },
     'Return type of index signature from exported interface is using inaccessible module {0}.': { code: 2063, category: 1 },
     'Return type of public static method from exported class is using inaccessible module {0}.': { code: 2064, category: 1 },
     'Return type of public method from exported class is using inaccessible module {0}.': { code: 2065, category: 1 },
     'Return type of method from exported interface is using inaccessible module {0}.': { code: 2066, category: 1 },
     'Return type of exported function is using inaccessible module {0}.': { code: 2067, category: 1 },
     '\'new T[]\' cannot be used to create an array. Use \'new Array<T>()\' instead.': { code: 2068, category: 1 },
     'A parameter list must follow a generic type argument list. \'(\' expected.': { code: 2069, category: 1 },
     'Multiple constructor implementations are not allowed.': { code: 2070, category: 1 },
     'Cannot find external module \'{0}\'.': { code: 2071, category: 1 },
     'Module cannot be aliased to a non-module type.': { code: 2072, category: 1 },
     'A class may only extend another class.': { code: 2073, category: 1 },
     'A class may only implement another class or interface.': { code: 2074, category: 1 },
     'An interface may only extend a class or another interface.': { code: 2075, category: 1 },
     'Unable to resolve type.': { code: 2077, category: 1 },
     'Unable to resolve type of \'{0}\'.': { code: 2078, category: 1 },
     'Unable to resolve type parameter constraint.': { code: 2079, category: 1 },
     'Type parameter constraint cannot be a primitive type.': { code: 2080, category: 1 },
     'Supplied parameters do not match any signature of call target.': { code: 2081, category: 1 },
     'Supplied parameters do not match any signature of call target:{NL}{0}': { code: 2082, category: 1 },
     'Cannot use \'new\' with an expression whose type lacks a signature.': { code: 2083, category: 1 },
     'Only a void function can be called with the \'new\' keyword.': { code: 2084, category: 1 },
     'Could not select overload for \'new\' expression.': { code: 2085, category: 1 },
     'Type \'{0}\' does not satisfy the constraint \'{1}\'.': { code: 2086, category: 1 },
     'Could not select overload for \'call\' expression.': { code: 2087, category: 1 },
     'Cannot invoke an expression whose type lacks a call signature.': { code: 2088, category: 1 },
     'Calls to \'super\' are only valid inside a class.': { code: 2089, category: 1 },
     'Generic type \'{0}\' requires {1} type argument(s).': { code: 2090, category: 1 },
     'Type of array literal cannot be determined. Best common type could not be found for array elements.': { code: 2092, category: 1 },
     'Could not find enclosing symbol for dotted name \'{0}\'.': { code: 2093, category: 1 },
     'Property \'{0}\' does not exist on value of type \'{1}\'.': { code: 2094, category: 1 },
     'Cannot find name \'{0}\'.': { code: 2095, category: 1 },
     '\'get\' and \'set\' accessor must have the same type.': { code: 2096, category: 1 },
     '\'this\' cannot be referenced in current location.': { code: 2097, category: 1 },
     'Static members cannot reference class type parameters.': { code: 2099, category: 1 },
     'Type \'{0}\' recursively references itself as a base type.': { code: 2100, category: 1 },
     '\'super\' property access is permitted only in a constructor, member function, or member accessor of a derived class.': { code: 2102, category: 1 },
     '\'super\' can only be referenced in a derived class.': { code: 2103, category: 1 },
     'A \'super\' call must be the first statement in the constructor when a class contains initialized properties or has parameter properties.': { code: 2104, category: 1 },
     'Constructors for derived classes must contain a \'super\' call.': { code: 2105, category: 1 },
     'Super calls are not permitted outside constructors or in nested functions inside constructors.': { code: 2106, category: 1 },
     '\'{0}.{1}\' is inaccessible.': { code: 2107, category: 1 },
     '\'this\' cannot be referenced in a module body.': { code: 2108, category: 1 },
     'Invalid \'+\' expression - types not known to support the addition operator.': { code: 2111, category: 1 },
     'The right-hand side of an arithmetic operation must be of type \'any\', \'number\' or an enum type.': { code: 2112, category: 1 },
     'The left-hand side of an arithmetic operation must be of type \'any\', \'number\' or an enum type.': { code: 2113, category: 1 },
     'An arithmetic operand must be of type \'any\', \'number\' or an enum type.': { code: 2114, category: 1 },
     'Variable declarations of a \'for\' statement cannot use a type annotation.': { code: 2115, category: 1 },
     'Variable declarations of a \'for\' statement must be of types \'string\' or \'any\'.': { code: 2116, category: 1 },
     'The right-hand side of a \'for...in\' statement must be of type \'any\', an object type or a type parameter.': { code: 2117, category: 1 },
     'The left-hand side of an \'in\' expression must be of types \'any\', \'string\' or \'number\'.': { code: 2118, category: 1 },
     'The right-hand side of an \'in\' expression must be of type \'any\', an object type or a type parameter.': { code: 2119, category: 1 },
     'The left-hand side of an \'instanceof\' expression must be of type \'any\', an object type or a type parameter.': { code: 2120, category: 1 },
     'The right-hand side of an \'instanceof\' expression must be of type \'any\' or of a type assignable to the \'Function\' interface type.': { code: 2121, category: 1 },
     'Setters cannot return a value.': { code: 2122, category: 1 },
     'Tried to query type of uninitialized module \'{0}\'.': { code: 2123, category: 1 },
     'Tried to set variable type to uninitialized module type \'{0}\'.': { code: 2124, category: 1 },
     'Type \'{0}\' is not generic.': { code: 2125, category: 1 },
     'Getters must return a value.': { code: 2126, category: 1 },
     'Getter and setter accessors do not agree in visibility.': { code: 2127, category: 1 },
     'Invalid left-hand side of assignment expression.': { code: 2130, category: 1 },
     'Function declared a non-void return type, but has no return expression.': { code: 2131, category: 1 },
     'Cannot resolve return type reference.': { code: 2132, category: 1 },
     'Constructors cannot have a return type of \'void\'.': { code: 2133, category: 1 },
     'Subsequent variable declarations must have the same type.  Variable \'{0}\' must be of type \'{1}\', but here has type \'{2}\'.': { code: 2134, category: 1 },
     'All symbols within a with block will be resolved to \'any\'.': { code: 2135, category: 1 },
     'Import declarations in an internal module cannot reference an external module.': { code: 2136, category: 1 },
     'Class {0} declares interface {1} but does not implement it:{NL}{2}': { code: 2137, category: 1 },
     'Class {0} declares class {1} as an interface but does not implement it:{NL}{2}': { code: 2138, category: 1 },
     'The operand of an increment or decrement operator must be a variable, property or indexer.': { code: 2139, category: 1 },
     '\'this\' cannot be referenced in a static property initializer.': { code: 2140, category: 1 },
     'Class \'{0}\' cannot extend class \'{1}\':{NL}{2}': { code: 2141, category: 1 },
     'Interface \'{0}\' cannot extend class \'{1}\':{NL}{2}': { code: 2142, category: 1 },
     'Interface \'{0}\' cannot extend interface \'{1}\':{NL}{2}': { code: 2143, category: 1 },
     'Overload signature is not compatible with function definition.': { code: 2148, category: 1 },
     'Overload signature is not compatible with function definition:{NL}{0}': { code: 2149, category: 1 },
     'Overload signatures must all be public or private.': { code: 2150, category: 1 },
     'Overload signatures must all be exported or not exported.': { code: 2151, category: 1 },
     'Overload signatures must all be ambient or non-ambient.': { code: 2152, category: 1 },
     'Overload signatures must all be optional or required.': { code: 2153, category: 1 },
     'Specialized overload signature is not assignable to any non-specialized signature.': { code: 2154, category: 1 },
     '\'this\' cannot be referenced in constructor arguments.': { code: 2155, category: 1 },
     'Instance member cannot be accessed off a class.': { code: 2157, category: 1 },
     'Untyped function calls may not accept type arguments.': { code: 2158, category: 1 },
     'Non-generic functions may not accept type arguments.': { code: 2159, category: 1 },
     'A generic type may not reference itself with a wrapped form of its own type parameters.': { code: 2160, category: 1 },
     'A rest parameter must be of an array type.': { code: 2162, category: 1 },
     'Overload signature implementation cannot use specialized type.': { code: 2163, category: 1 },
     'Export assignments may only be used at the top-level of external modules.': { code: 2164, category: 1 },
     'Export assignments may only be made with variables, functions, classes, interfaces, enums and internal modules.': { code: 2165, category: 1 },
     'Only public methods of the base class are accessible via the \'super\' keyword.': { code: 2166, category: 1 },
     'Numeric indexer type \'{0}\' must be assignable to string indexer type \'{1}\'.': { code: 2167, category: 1 },
     'Numeric indexer type \'{0}\' must be assignable to string indexer type \'{1}\':{NL}{2}': { code: 2168, category: 1 },
     'All numerically named properties must be assignable to numeric indexer type \'{0}\'.': { code: 2169, category: 1 },
     'All numerically named properties must be assignable to numeric indexer type \'{0}\':{NL}{1}': { code: 2170, category: 1 },
     'All named properties must be assignable to string indexer type \'{0}\'.': { code: 2171, category: 1 },
     'All named properties must be assignable to string indexer type \'{0}\':{NL}{1}': { code: 2172, category: 1 },
     'A parameter initializer is only allowed in a function or constructor implementation.': { code: 2174, category: 1 },
     'Function expression declared a non-void return type, but has no return expression.': { code: 2176, category: 1 },
     'Import declaration referencing identifier from internal module can only be made with variables, functions, classes, interfaces, enums and internal modules.': { code: 2177, category: 1 },
     'Module \'{0}\' has no exported member \'{1}\'.': { code: 2178, category: 1 },
     'Unable to resolve module reference \'{0}\'.': { code: 2179, category: 1 },
     'Could not find module \'{0}\' in module \'{1}\'.': { code: 2180, category: 1 },
     'Exported import declaration \'{0}\' is assigned value with type that has or is using private type \'{1}\'.': { code: 2181, category: 1 },
     'Exported import declaration \'{0}\' is assigned value with type that is using inaccessible module \'{1}\'.': { code: 2182, category: 1 },
     'Exported import declaration \'{0}\' is assigned type that has or is using private type \'{1}\'.': { code: 2183, category: 1 },
     'Exported import declaration \'{0}\' is assigned type that is using inaccessible module \'{1}\'.': { code: 2184, category: 1 },
     'Exported import declaration \'{0}\' is assigned container that is or is using inaccessible module \'{1}\'.': { code: 2185, category: 1 },
     'Type name \'{0}\' in extends clause does not reference constructor function for \'{1}\'.': { code: 2186, category: 1 },
     'Internal module reference \'{0}\' in import declaration does not reference module instance for \'{1}\'.': { code: 2187, category: 1 },
     'Module \'{0}\' cannot merge with previous declaration of \'{1}\' in a different file \'{2}\'.': { code: 2188, category: 1 },
     'Interface \'{0}\' cannot simultaneously extend types \'{1}\' and \'{2}\':{NL}{3}': { code: 2189, category: 1 },
     'Initializer of parameter \'{0}\' cannot reference identifier \'{1}\' declared after it.': { code: 2190, category: 1 },
     'Ambient external module declaration cannot be reopened.': { code: 2191, category: 1 },
     'All declarations of merged declaration \'{0}\' must be exported or not exported.': { code: 2192, category: 1 },
     '\'super\' cannot be referenced in constructor arguments.': { code: 2193, category: 1 },
     'Return type of constructor signature must be assignable to the instance type of the class.': { code: 2194, category: 1 },
     'Ambient external module declaration must be defined in global context.': { code: 2195, category: 1 },
     'Ambient external module declaration cannot specify relative module name.': { code: 2196, category: 1 },
     'Import declaration in an ambient external module declaration cannot reference external module through relative external module name.': { code: 2197, category: 1 },
     'No best common type exists among return expressions.': { code: 2198, category: 1 },
     'Import declaration cannot refer to external module reference when --noResolve option is set.': { code: 2199, category: 1 },
     'Duplicate identifier \'_this\'. Compiler uses variable declaration \'_this\' to capture \'this\' reference.': { code: 2200, category: 1 },
     'Duplicate identifier \'_super\'. Compiler uses \'_super\' to capture base class reference.': { code: 2205, category: 1 },
     'Expression resolves to variable declaration \'_this\' that compiler uses to capture \'this\' reference.': { code: 2206, category: 1 },
     'Expression resolves to \'_super\' that compiler uses to capture base class reference.': { code: 2207, category: 1 },
     'TypeParameter \'{0}\' of constructor signature from exported interface has or is using private type \'{1}\'.': { code: 2208, category: 1 },
     'TypeParameter \'{0}\' of call signature from exported interface has or is using private type \'{1}\'.': { code: 2209, category: 1 },
     'TypeParameter \'{0}\' of public static method from exported class has or is using private type \'{1}\'.': { code: 2210, category: 1 },
     'TypeParameter \'{0}\' of public method from exported class has or is using private type \'{1}\'.': { code: 2211, category: 1 },
     'TypeParameter \'{0}\' of method from exported interface has or is using private type \'{1}\'.': { code: 2212, category: 1 },
     'TypeParameter \'{0}\' of exported function has or is using private type \'{1}\'.': { code: 2213, category: 1 },
     'TypeParameter \'{0}\' of constructor signature from exported interface is using inaccessible module {1}.': { code: 2214, category: 1 },
     'TypeParameter \'{0}\' of call signature from exported interface is using inaccessible module {1}': { code: 2215, category: 1 },
     'TypeParameter \'{0}\' of public static method from exported class is using inaccessible module {1}.': { code: 2216, category: 1 },
     'TypeParameter \'{0}\' of public method from exported class is using inaccessible module {1}.': { code: 2217, category: 1 },
     'TypeParameter \'{0}\' of method from exported interface is using inaccessible module {1}.': { code: 2218, category: 1 },
     'TypeParameter \'{0}\' of exported function is using inaccessible module {1}.': { code: 2219, category: 1 },
     'TypeParameter \'{0}\' of exported class has or is using private type \'{1}\'.': { code: 2220, category: 1 },
     'TypeParameter \'{0}\' of exported interface has or is using private type \'{1}\'.': { code: 2221, category: 1 },
     'TypeParameter \'{0}\' of exported class is using inaccessible module {1}.': { code: 2222, category: 1 },
     'TypeParameter \'{0}\' of exported interface is using inaccessible module {1}.': { code: 2223, category: 1 },
     'Duplicate identifier \'_i\'. Compiler uses \'_i\' to initialize rest parameter.': { code: 2224, category: 1 },
     'Duplicate identifier \'arguments\'. Compiler uses \'arguments\' to initialize rest parameters.': { code: 2225, category: 1 },
     'No best common type exists between \'{0}\' and \'{1}\'.': { code: 2226, category: 1 },
     'No best common type exists between \'{0}\', \'{1}\', and \'{2}\'.': { code: 2227, category: 1 },
     'Duplicate identifier \'{0}\'. Compiler reserves name \'{1}\' in top level scope of an external module.': { code: 2228, category: 1 },
     'Constraint of a type parameter cannot reference any type parameter from the same type parameter list.': { code: 2229, category: 1 },
     'Initializer of instance member variable \'{0}\' cannot reference identifier \'{1}\' declared in the constructor.': { code: 2230, category: 1 },
     'Parameter \'{0}\' cannot be referenced in its initializer.': { code: 2231, category: 1 },
     'Duplicate string index signature.': { code: 2232, category: 1 },
     'Duplicate number index signature.': { code: 2233, category: 1 },
     'All declarations of an interface must have identical type parameters.': { code: 2234, category: 1 },
     'Expression resolves to variable declaration \'_i\' that compiler uses to initialize rest parameter.': { code: 2235, category: 1 },
     'Neither type \'{0}\' nor type \'{1}\' is assignable to the other.': { code: 2236, category: 1 },
     'Neither type \'{0}\' nor type \'{1}\' is assignable to the other:{NL}{2}': { code: 2237, category: 1 },
     'Duplicate function implementation.': { code: 2237, category: 1 },
     'Function implementation expected.': { code: 2238, category: 1 },
     'Function overload name must be \'{0}\'.': { code: 2239, category: 1 },
     'Constructor implementation expected.': { code: 2240, category: 1 },
     'Class name cannot be \'{0}\'.': { code: 2241, category: 1 },
     'Interface name cannot be \'{0}\'.': { code: 2242, category: 1 },
     'Enum name cannot be \'{0}\'.': { code: 2243, category: 1 },
     'A module cannot have multiple export assignments.': { code: 2244, category: 1 },
     'Export assignment not allowed in module with exported element.': { code: 2245, category: 1 },
     'A parameter property is only allowed in a constructor implementation.': { code: 2246, category: 1 },
     'Function overload must be static.': { code: 2247, category: 1 },
     'Function overload must not be static.': { code: 2248, category: 1 },
     'Type \'{0}\' is missing property \'{1}\' from type \'{2}\'.': { code: 4000, category: 3 },
     'Types of property \'{0}\' of types \'{1}\' and \'{2}\' are incompatible.': { code: 4001, category: 3 },
     'Types of property \'{0}\' of types \'{1}\' and \'{2}\' are incompatible:{NL}{3}': { code: 4002, category: 3 },
     'Property \'{0}\' defined as private in type \'{1}\' is defined as public in type \'{2}\'.': { code: 4003, category: 3 },
     'Property \'{0}\' defined as public in type \'{1}\' is defined as private in type \'{2}\'.': { code: 4004, category: 3 },
     'Types \'{0}\' and \'{1}\' define property \'{2}\' as private.': { code: 4005, category: 3 },
     'Call signatures of types \'{0}\' and \'{1}\' are incompatible.': { code: 4006, category: 3 },
     'Call signatures of types \'{0}\' and \'{1}\' are incompatible:{NL}{2}': { code: 4007, category: 3 },
     'Type \'{0}\' requires a call signature, but type \'{1}\' lacks one.': { code: 4008, category: 3 },
     'Construct signatures of types \'{0}\' and \'{1}\' are incompatible.': { code: 4009, category: 3 },
     'Construct signatures of types \'{0}\' and \'{1}\' are incompatible:{NL}{2}': { code: 4010, category: 3 },
     'Type \'{0}\' requires a construct signature, but type \'{1}\' lacks one.': { code: 4011, category: 3 },
     'Index signatures of types \'{0}\' and \'{1}\' are incompatible.': { code: 4012, category: 3 },
     'Index signatures of types \'{0}\' and \'{1}\' are incompatible:{NL}{2}': { code: 4013, category: 3 },
     'Call signature expects {0} or fewer parameters.': { code: 4014, category: 3 },
     'Could not apply type \'{0}\' to argument {1} which is of type \'{2}\'.': { code: 4015, category: 3 },
     'Class \'{0}\' defines instance member accessor \'{1}\', but extended class \'{2}\' defines it as instance member function.': { code: 4016, category: 3 },
     'Class \'{0}\' defines instance member property \'{1}\', but extended class \'{2}\' defines it as instance member function.': { code: 4017, category: 3 },
     'Class \'{0}\' defines instance member function \'{1}\', but extended class \'{2}\' defines it as instance member accessor.': { code: 4018, category: 3 },
     'Class \'{0}\' defines instance member function \'{1}\', but extended class \'{2}\' defines it as instance member property.': { code: 4019, category: 3 },
     'Types of static property \'{0}\' of class \'{1}\' and class \'{2}\' are incompatible.': { code: 4020, category: 3 },
     'Types of static property \'{0}\' of class \'{1}\' and class \'{2}\' are incompatible:{NL}{3}': { code: 4021, category: 3 },
     'Type reference cannot refer to container \'{0}\'.': { code: 4022, category: 1 },
     'Type reference must refer to type.': { code: 4023, category: 1 },
     'In enums with multiple declarations only one declaration can omit an initializer for the first enum element.': { code: 4024, category: 1 },
     ' (+ {0} overload(s))': { code: 4025, category: 2 },
     'Variable declaration cannot have the same name as an import declaration.': { code: 4026, category: 1 },
     'Signature expected {0} type arguments, got {1} instead.': { code: 4027, category: 1 },
     'Property \'{0}\' defined as optional in type \'{1}\', but is required in type \'{2}\'.': { code: 4028, category: 3 },
     'Types \'{0}\' and \'{1}\' originating in infinitely expanding type reference do not refer to same named type.': { code: 4029, category: 3 },
     'Types \'{0}\' and \'{1}\' originating in infinitely expanding type reference have incompatible type arguments.': { code: 4030, category: 3 },
     'Types \'{0}\' and \'{1}\' originating in infinitely expanding type reference have incompatible type arguments:{NL}{2}': { code: 4031, category: 3 },
     'Named properties \'{0}\' of types \'{1}\' and \'{2}\' are not identical.': { code: 4032, category: 3 },
     'Types of string indexer of types \'{0}\' and \'{1}\' are not identical.': { code: 4033, category: 3 },
     'Types of number indexer of types \'{0}\' and \'{1}\' are not identical.': { code: 4034, category: 3 },
     'Type of number indexer in type \'{0}\' is not assignable to string indexer type in type \'{1}\'.{NL}{2}': { code: 4035, category: 3 },
     'Type of property \'{0}\' in type \'{1}\' is not assignable to string indexer type in type \'{2}\'.{NL}{3}': { code: 4036, category: 3 },
     'Type of property \'{0}\' in type \'{1}\' is not assignable to number indexer type in type \'{2}\'.{NL}{3}': { code: 4037, category: 3 },
     'Static property \'{0}\' defined as private in type \'{1}\' is defined as public in type \'{2}\'.': { code: 4038, category: 3 },
     'Static property \'{0}\' defined as public in type \'{1}\' is defined as private in type \'{2}\'.': { code: 4039, category: 3 },
     'Types \'{0}\' and \'{1}\' define static property \'{2}\' as private.': { code: 4040, category: 3 },
     'Current host does not support \'{0}\' option.': { code: 5001, category: 1 },
     'ECMAScript target version \'{0}\' not supported.  Specify a valid target version: \'{1}\' (default), or \'{2}\'': { code: 5002, category: 1 },
     'Argument for \'{0}\' option must be \'{1}\' or \'{2}\'': { code: 5003, category: 1 },
     'Could not find file: \'{0}\'.': { code: 5004, category: 1 },
     'A file cannot have a reference to itself.': { code: 5006, category: 1 },
     'Cannot resolve referenced file: \'{0}\'.': { code: 5007, category: 1 },
     'Cannot find the common subdirectory path for the input files.': { code: 5009, category: 1 },
     'Emit Error: {0}.': { code: 5011, category: 1 },
     'Cannot read file \'{0}\': {1}': { code: 5012, category: 1 },
     'Unsupported file encoding.': { code: 5013, category: 3 },
     'Locale must be of the form <language> or <language>-<territory>. For example \'{0}\' or \'{1}\'.': { code: 5014, category: 1 },
     'Unsupported locale: \'{0}\'.': { code: 5015, category: 1 },
     'Execution Failed.{NL}': { code: 5016, category: 1 },
     'Invalid call to \'up\'': { code: 5019, category: 1 },
     'Invalid call to \'down\'': { code: 5020, category: 1 },
     'Base64 value \'{0}\' finished with a continuation bit.': { code: 5021, category: 1 },
     'Unknown compiler option \'{0}\'': { code: 5023, category: 1 },
     'Expected {0} arguments to message, got {1} instead.': { code: 5024, category: 1 },
     'Expected the message \'{0}\' to have {1} arguments, but it had {2}': { code: 5025, category: 1 },
     'Could not delete file \'{0}\'': { code: 5034, category: 1 },
     'Could not create directory \'{0}\'': { code: 5035, category: 1 },
     'Error while executing file \'{0}\': ': { code: 5036, category: 1 },
     'Cannot compile external modules unless the \'--module\' flag is provided.': { code: 5037, category: 1 },
     'Option mapRoot cannot be specified without specifying sourcemap option.': { code: 5038, category: 1 },
     'Option sourceRoot cannot be specified without specifying sourcemap option.': { code: 5039, category: 1 },
     'Options mapRoot and sourceRoot cannot be specified without specifying sourcemap option.': { code: 5040, category: 1 },
     'Option \'{0}\' specified without \'{1}\'': { code: 5041, category: 1 },
     '\'codepage\' option not supported on current platform.': { code: 5042, category: 1 },
     'Concatenate and emit output to single file.': { code: 6001, category: 2 },
     'Generates corresponding {0} file.': { code: 6002, category: 2 },
     'Specifies the location where debugger should locate map files instead of generated locations.': { code: 6003, category: 2 },
     'Specifies the location where debugger should locate TypeScript files instead of source locations.': { code: 6004, category: 2 },
     'Watch input files.': { code: 6005, category: 2 },
     'Redirect output structure to the directory.': { code: 6006, category: 2 },
     'Do not emit comments to output.': { code: 6009, category: 2 },
     'Skip resolution and preprocessing.': { code: 6010, category: 2 },
     'Specify ECMAScript target version: \'{0}\' (default), or \'{1}\'': { code: 6015, category: 2 },
     'Specify module code generation: \'{0}\' or \'{1}\'': { code: 6016, category: 2 },
     'Print this message.': { code: 6017, category: 2 },
     'Print the compiler\'s version: {0}': { code: 6019, category: 2 },
     'Allow use of deprecated \'{0}\' keyword when referencing an external module.': { code: 6021, category: 2 },
     'Specify locale for errors and messages. For example \'{0}\' or \'{1}\'': { code: 6022, category: 2 },
     'Syntax:   {0}': { code: 6023, category: 2 },
     options: { code: 6024, category: 2 },
     file1: { code: 6025, category: 2 },
     'Examples:': { code: 6026, category: 2 },
     'Options:': { code: 6027, category: 2 },
     'Insert command line options and files from a file.': { code: 6030, category: 2 },
     'Version {0}': { code: 6029, category: 2 },
     'Use the \'{0}\' flag to see options.': { code: 6031, category: 2 },
     '{NL}Recompiling ({0}):': { code: 6032, category: 2 },
     STRING: { code: 6033, category: 2 },
     KIND: { code: 6034, category: 2 },
     file2: { code: 6035, category: 2 },
     VERSION: { code: 6036, category: 2 },
     LOCATION: { code: 6037, category: 2 },
     DIRECTORY: { code: 6038, category: 2 },
     NUMBER: { code: 6039, category: 2 },
     'Specify the codepage to use when opening source files.': { code: 6040, category: 2 },
     'Additional locations:': { code: 6041, category: 2 },
     'This version of the Javascript runtime does not support the \'{0}\' function.': { code: 7000, category: 1 },
     'Unknown rule.': { code: 7002, category: 1 },
     'Invalid line number ({0})': { code: 7003, category: 1 },
     'Warn on expressions and declarations with an implied \'any\' type.': { code: 7004, category: 2 },
     'Variable \'{0}\' implicitly has an \'any\' type.': { code: 7005, category: 1 },
     'Parameter \'{0}\' of \'{1}\' implicitly has an \'any\' type.': { code: 7006, category: 1 },
     'Parameter \'{0}\' of function type implicitly has an \'any\' type.': { code: 7007, category: 1 },
     'Member \'{0}\' of object type implicitly has an \'any\' type.': { code: 7008, category: 1 },
     '\'new\' expression, which lacks a constructor signature, implicitly has an \'any\' type.': { code: 7009, category: 1 },
     '\'{0}\', which lacks return-type annotation, implicitly has an \'any\' return type.': { code: 7010, category: 1 },
     'Function expression, which lacks return-type annotation, implicitly has an \'any\' return type.': { code: 7011, category: 1 },
     'Parameter \'{0}\' of lambda function implicitly has an \'any\' type.': { code: 7012, category: 1 },
     'Constructor signature, which lacks return-type annotation, implicitly has an \'any\' return type.': { code: 7013, category: 1 },
     'Lambda Function, which lacks return-type annotation, implicitly has an \'any\' return type.': { code: 7014, category: 1 },
     'Array Literal implicitly has an \'any\' type from widening.': { code: 7015, category: 1 },
     '\'{0}\', which lacks \'get\' accessor and parameter type annotation on \'set\' accessor, implicitly has an \'any\' type.': { code: 7016, category: 1 },
     'Index signature of object type implicitly has an \'any\' type.': { code: 7017, category: 1 },
     'Object literal\'s property \'{0}\' implicitly has an \'any\' type from widening.': { code: 7018, category: 1 } },
  ArrayUtilities: 
   { [Function: ArrayUtilities]
     sequenceEquals: [Function],
     contains: [Function],
     distinct: [Function],
     last: [Function],
     lastOrDefault: [Function],
     firstOrDefault: [Function],
     first: [Function],
     sum: [Function],
     select: [Function],
     where: [Function],
     any: [Function],
     all: [Function],
     binarySearch: [Function],
     createArray: [Function],
     grow: [Function],
     copy: [Function],
     indexOf: [Function] },
  AssertionLevel: 
   { '0': 'None',
     '1': 'Normal',
     '2': 'Aggressive',
     '3': 'VeryAggressive',
     None: 0,
     Normal: 1,
     Aggressive: 2,
     VeryAggressive: 3 },
  Debug: 
   { [Function: Debug]
     shouldAssert: [Function],
     assert: [Function],
     fail: [Function],
     currentAssertionLevel: 0 },
  LocalizedDiagnosticMessages: null,
  Location: { [Function: Location] equals: [Function] },
  Diagnostic: { [Function: Diagnostic] equals: [Function] },
  newLine: [Function: newLine],
  getLocalizedText: [Function: getLocalizedText],
  getDiagnosticMessage: [Function: getDiagnosticMessage],
  Errors: 
   { [Function: Errors]
     argument: [Function],
     argumentOutOfRange: [Function],
     argumentNull: [Function],
     abstract: [Function],
     notYetImplemented: [Function],
     invalidOperation: [Function] },
  IntegerUtilities: 
   { integerDivide: [Function: integerDivide],
     integerMultiplyLow32Bits: [Function: integerMultiplyLow32Bits],
     isInteger: [Function: isInteger],
     isHexInteger: [Function: isHexInteger] },
  LineMap: 
   { [Function: LineMap]
     empty: { _computeLineStarts: [Function], length: 0, _lineStarts: null } },
  LineAndCharacter: [Function: LineAndCharacter],
  StringUtilities: 
   { [Function: StringUtilities]
     isString: [Function],
     endsWith: [Function],
     startsWith: [Function],
     repeat: [Function] },
  CharacterCodes: 
   { '0': 'nullCharacter',
     '8': 'backspace',
     '9': 'tab',
     '10': 'lineFeed',
     '11': 'verticalTab',
     '12': 'formFeed',
     '13': 'carriageReturn',
     '32': 'space',
     '33': 'exclamation',
     '34': 'doubleQuote',
     '36': '$',
     '37': 'percent',
     '38': 'ampersand',
     '39': 'singleQuote',
     '40': 'openParen',
     '41': 'closeParen',
     '42': 'asterisk',
     '43': 'plus',
     '44': 'comma',
     '45': 'minus',
     '46': 'dot',
     '47': 'slash',
     '48': '_0',
     '49': '_1',
     '50': '_2',
     '51': '_3',
     '52': '_4',
     '53': '_5',
     '54': '_6',
     '55': '_7',
     '56': '_8',
     '57': '_9',
     '58': 'colon',
     '59': 'semicolon',
     '60': 'lessThan',
     '61': 'equals',
     '62': 'greaterThan',
     '63': 'question',
     '64': 'at',
     '65': 'A',
     '66': 'B',
     '67': 'C',
     '68': 'D',
     '69': 'E',
     '70': 'F',
     '71': 'G',
     '72': 'H',
     '73': 'I',
     '74': 'J',
     '75': 'K',
     '76': 'L',
     '77': 'M',
     '78': 'N',
     '79': 'O',
     '80': 'P',
     '81': 'Q',
     '82': 'R',
     '83': 'S',
     '84': 'T',
     '85': 'U',
     '86': 'V',
     '87': 'W',
     '88': 'X',
     '89': 'Y',
     '90': 'Z',
     '91': 'openBracket',
     '92': 'backslash',
     '93': 'closeBracket',
     '94': 'caret',
     '95': '_',
     '97': 'a',
     '98': 'b',
     '99': 'c',
     '100': 'd',
     '101': 'e',
     '102': 'f',
     '103': 'g',
     '104': 'h',
     '105': 'i',
     '106': 'j',
     '107': 'k',
     '108': 'l',
     '109': 'm',
     '110': 'n',
     '111': 'o',
     '112': 'p',
     '113': 'q',
     '114': 'r',
     '115': 's',
     '116': 't',
     '117': 'u',
     '118': 'v',
     '119': 'w',
     '120': 'x',
     '121': 'y',
     '122': 'z',
     '123': 'openBrace',
     '124': 'bar',
     '125': 'closeBrace',
     '126': 'tilde',
     '127': 'maxAsciiCharacter',
     '133': 'nextLine',
     '160': 'nonBreakingSpace',
     '8192': 'enQuad',
     '8193': 'emQuad',
     '8194': 'enSpace',
     '8195': 'emSpace',
     '8196': 'threePerEmSpace',
     '8197': 'fourPerEmSpace',
     '8198': 'sixPerEmSpace',
     '8199': 'figureSpace',
     '8200': 'punctuationSpace',
     '8201': 'thinSpace',
     '8202': 'hairSpace',
     '8203': 'zeroWidthSpace',
     '8232': 'lineSeparator',
     '8233': 'paragraphSeparator',
     '8239': 'narrowNoBreakSpace',
     '12288': 'ideographicSpace',
     '65279': 'byteOrderMark',
     nullCharacter: 0,
     maxAsciiCharacter: 127,
     lineFeed: 10,
     carriageReturn: 13,
     lineSeparator: 8232,
     paragraphSeparator: 8233,
     nextLine: 133,
     space: 32,
     nonBreakingSpace: 160,
     enQuad: 8192,
     emQuad: 8193,
     enSpace: 8194,
     emSpace: 8195,
     threePerEmSpace: 8196,
     fourPerEmSpace: 8197,
     sixPerEmSpace: 8198,
     figureSpace: 8199,
     punctuationSpace: 8200,
     thinSpace: 8201,
     hairSpace: 8202,
     zeroWidthSpace: 8203,
     narrowNoBreakSpace: 8239,
     ideographicSpace: 12288,
     _: 95,
     '$': 36,
     _0: 48,
     _1: 49,
     _2: 50,
     _3: 51,
     _4: 52,
     _5: 53,
     _6: 54,
     _7: 55,
     _8: 56,
     _9: 57,
     a: 97,
     b: 98,
     c: 99,
     d: 100,
     e: 101,
     f: 102,
     g: 103,
     h: 104,
     i: 105,
     j: 106,
     k: 107,
     l: 108,
     m: 109,
     n: 110,
     o: 111,
     p: 112,
     q: 113,
     r: 114,
     s: 115,
     t: 116,
     u: 117,
     v: 118,
     w: 119,
     x: 120,
     y: 121,
     z: 122,
     A: 65,
     B: 66,
     C: 67,
     D: 68,
     E: 69,
     F: 70,
     G: 71,
     H: 72,
     I: 73,
     J: 74,
     K: 75,
     L: 76,
     M: 77,
     N: 78,
     O: 79,
     P: 80,
     Q: 81,
     R: 82,
     S: 83,
     T: 84,
     U: 85,
     V: 86,
     W: 87,
     X: 88,
     Y: 89,
     Z: 90,
     ampersand: 38,
     asterisk: 42,
     at: 64,
     backslash: 92,
     bar: 124,
     caret: 94,
     closeBrace: 125,
     closeBracket: 93,
     closeParen: 41,
     colon: 58,
     comma: 44,
     dot: 46,
     doubleQuote: 34,
     equals: 61,
     exclamation: 33,
     greaterThan: 62,
     lessThan: 60,
     minus: 45,
     openBrace: 123,
     openBracket: 91,
     openParen: 40,
     percent: 37,
     plus: 43,
     question: 63,
     semicolon: 59,
     singleQuote: 39,
     slash: 47,
     tilde: 126,
     backspace: 8,
     formFeed: 12,
     byteOrderMark: 65279,
     tab: 9,
     verticalTab: 11 },
  ScriptSnapshot: { fromString: [Function: fromString] },
  LineMap1: 
   { fromSimpleText: [Function: fromSimpleText],
     fromScriptSnapshot: [Function: fromScriptSnapshot],
     fromString: [Function: fromString] },
  SimpleText: 
   { fromString: [Function: fromString],
     fromScriptSnapshot: [Function: fromScriptSnapshot] },
  TextUtilities: 
   { parseLineStarts: [Function: parseLineStarts],
     getLengthOfLineBreakSlow: [Function: getLengthOfLineBreakSlow],
     getLengthOfLineBreak: [Function: getLengthOfLineBreak],
     isAnyLineBreakCharacter: [Function: isAnyLineBreakCharacter] },
  TextSpan: { [Function: TextSpan] fromBounds: [Function] },
  TextChangeRange: 
   { [Function: TextChangeRange]
     collapseChangesAcrossMultipleVersions: [Function],
     unchanged: { _span: [Object], _newLength: 0 } },
  CharacterInfo: 
   { isDecimalDigit: [Function: isDecimalDigit],
     isOctalDigit: [Function: isOctalDigit],
     isHexDigit: [Function: isHexDigit],
     hexValue: [Function: hexValue],
     isWhitespace: [Function: isWhitespace],
     isLineTerminator: [Function: isLineTerminator] },
  SyntaxConstants: 
   { '0': 'None',
     '1': 'NodeDataComputed',
     '2': 'NodeIncrementallyUnusableMask',
     '3': 'NodeFullWidthShift',
     '4': 'NodeParsedInStrictModeMask',
     None: 0,
     NodeDataComputed: 1,
     NodeIncrementallyUnusableMask: 2,
     NodeParsedInStrictModeMask: 4,
     NodeFullWidthShift: 3 },
  FormattingOptions: 
   { [Function: FormattingOptions]
     defaultOptions: 
      { useTabs: false,
        spacesPerTab: 4,
        indentSpaces: 4,
        newLineCharacter: '\r\n' } },
  SyntaxKind: 
   { '0': 'None',
     '1': 'List',
     '2': 'SeparatedList',
     '3': 'TriviaList',
     '4': 'FirstTrivia',
     '5': 'NewLineTrivia',
     '6': 'MultiLineCommentTrivia',
     '7': 'SingleLineCommentTrivia',
     '8': 'LastTrivia',
     '9': 'FirstToken',
     '10': 'EndOfFileToken',
     '11': 'IdentifierName',
     '12': 'RegularExpressionLiteral',
     '13': 'NumericLiteral',
     '14': 'StringLiteral',
     '15': 'FirstFixedWidth',
     '16': 'CaseKeyword',
     '17': 'CatchKeyword',
     '18': 'ContinueKeyword',
     '19': 'DebuggerKeyword',
     '20': 'DefaultKeyword',
     '21': 'DeleteKeyword',
     '22': 'DoKeyword',
     '23': 'ElseKeyword',
     '24': 'FalseKeyword',
     '25': 'FinallyKeyword',
     '26': 'ForKeyword',
     '27': 'FunctionKeyword',
     '28': 'IfKeyword',
     '29': 'InKeyword',
     '30': 'InstanceOfKeyword',
     '31': 'NewKeyword',
     '32': 'NullKeyword',
     '33': 'ReturnKeyword',
     '34': 'SwitchKeyword',
     '35': 'ThisKeyword',
     '36': 'ThrowKeyword',
     '37': 'TrueKeyword',
     '38': 'TryKeyword',
     '39': 'TypeOfKeyword',
     '40': 'VarKeyword',
     '41': 'VoidKeyword',
     '42': 'WhileKeyword',
     '43': 'LastStandardKeyword',
     '44': 'FirstFutureReservedKeyword',
     '45': 'ConstKeyword',
     '46': 'EnumKeyword',
     '47': 'ExportKeyword',
     '48': 'ExtendsKeyword',
     '49': 'ImportKeyword',
     '50': 'LastFutureReservedKeyword',
     '51': 'FirstFutureReservedStrictKeyword',
     '52': 'InterfaceKeyword',
     '53': 'LetKeyword',
     '54': 'PackageKeyword',
     '55': 'PrivateKeyword',
     '56': 'ProtectedKeyword',
     '57': 'PublicKeyword',
     '58': 'StaticKeyword',
     '59': 'LastFutureReservedStrictKeyword',
     '60': 'FirstTypeScriptKeyword',
     '61': 'BooleanKeyword',
     '62': 'ConstructorKeyword',
     '63': 'DeclareKeyword',
     '64': 'GetKeyword',
     '65': 'ModuleKeyword',
     '66': 'RequireKeyword',
     '67': 'NumberKeyword',
     '68': 'SetKeyword',
     '69': 'LastKeyword',
     '70': 'FirstPunctuation',
     '71': 'CloseBraceToken',
     '72': 'OpenParenToken',
     '73': 'CloseParenToken',
     '74': 'OpenBracketToken',
     '75': 'CloseBracketToken',
     '76': 'DotToken',
     '77': 'DotDotDotToken',
     '78': 'SemicolonToken',
     '79': 'CommaToken',
     '80': 'LessThanToken',
     '81': 'GreaterThanToken',
     '82': 'LessThanEqualsToken',
     '83': 'GreaterThanEqualsToken',
     '84': 'EqualsEqualsToken',
     '85': 'EqualsGreaterThanToken',
     '86': 'ExclamationEqualsToken',
     '87': 'EqualsEqualsEqualsToken',
     '88': 'ExclamationEqualsEqualsToken',
     '89': 'PlusToken',
     '90': 'MinusToken',
     '91': 'AsteriskToken',
     '92': 'PercentToken',
     '93': 'PlusPlusToken',
     '94': 'MinusMinusToken',
     '95': 'LessThanLessThanToken',
     '96': 'GreaterThanGreaterThanToken',
     '97': 'GreaterThanGreaterThanGreaterThanToken',
     '98': 'AmpersandToken',
     '99': 'BarToken',
     '100': 'CaretToken',
     '101': 'ExclamationToken',
     '102': 'TildeToken',
     '103': 'AmpersandAmpersandToken',
     '104': 'BarBarToken',
     '105': 'QuestionToken',
     '106': 'ColonToken',
     '107': 'EqualsToken',
     '108': 'PlusEqualsToken',
     '109': 'MinusEqualsToken',
     '110': 'AsteriskEqualsToken',
     '111': 'PercentEqualsToken',
     '112': 'LessThanLessThanEqualsToken',
     '113': 'GreaterThanGreaterThanEqualsToken',
     '114': 'GreaterThanGreaterThanGreaterThanEqualsToken',
     '115': 'AmpersandEqualsToken',
     '116': 'BarEqualsToken',
     '117': 'CaretEqualsToken',
     '118': 'SlashToken',
     '119': 'LastFixedWidth',
     '120': 'FirstNode',
     '121': 'QualifiedName',
     '122': 'ObjectType',
     '123': 'FunctionType',
     '124': 'ArrayType',
     '125': 'ConstructorType',
     '126': 'GenericType',
     '127': 'TypeQuery',
     '128': 'InterfaceDeclaration',
     '129': 'FunctionDeclaration',
     '130': 'ModuleDeclaration',
     '131': 'ClassDeclaration',
     '132': 'EnumDeclaration',
     '133': 'ImportDeclaration',
     '134': 'ExportAssignment',
     '135': 'MemberFunctionDeclaration',
     '136': 'MemberVariableDeclaration',
     '137': 'ConstructorDeclaration',
     '138': 'IndexMemberDeclaration',
     '139': 'GetAccessor',
     '140': 'SetAccessor',
     '141': 'PropertySignature',
     '142': 'CallSignature',
     '143': 'ConstructSignature',
     '144': 'IndexSignature',
     '145': 'MethodSignature',
     '146': 'Block',
     '147': 'IfStatement',
     '148': 'VariableStatement',
     '149': 'ExpressionStatement',
     '150': 'ReturnStatement',
     '151': 'SwitchStatement',
     '152': 'BreakStatement',
     '153': 'ContinueStatement',
     '154': 'ForStatement',
     '155': 'ForInStatement',
     '156': 'EmptyStatement',
     '157': 'ThrowStatement',
     '158': 'WhileStatement',
     '159': 'TryStatement',
     '160': 'LabeledStatement',
     '161': 'DoStatement',
     '162': 'DebuggerStatement',
     '163': 'WithStatement',
     '164': 'PlusExpression',
     '165': 'NegateExpression',
     '166': 'BitwiseNotExpression',
     '167': 'LogicalNotExpression',
     '168': 'PreIncrementExpression',
     '169': 'PreDecrementExpression',
     '170': 'DeleteExpression',
     '171': 'TypeOfExpression',
     '172': 'VoidExpression',
     '173': 'CommaExpression',
     '174': 'AssignmentExpression',
     '175': 'AddAssignmentExpression',
     '176': 'SubtractAssignmentExpression',
     '177': 'MultiplyAssignmentExpression',
     '178': 'DivideAssignmentExpression',
     '179': 'ModuloAssignmentExpression',
     '180': 'AndAssignmentExpression',
     '181': 'ExclusiveOrAssignmentExpression',
     '182': 'OrAssignmentExpression',
     '183': 'LeftShiftAssignmentExpression',
     '184': 'SignedRightShiftAssignmentExpression',
     '185': 'UnsignedRightShiftAssignmentExpression',
     '186': 'ConditionalExpression',
     '187': 'LogicalOrExpression',
     '188': 'LogicalAndExpression',
     '189': 'BitwiseOrExpression',
     '190': 'BitwiseExclusiveOrExpression',
     '191': 'BitwiseAndExpression',
     '192': 'EqualsWithTypeConversionExpression',
     '193': 'NotEqualsWithTypeConversionExpression',
     '194': 'EqualsExpression',
     '195': 'NotEqualsExpression',
     '196': 'LessThanExpression',
     '197': 'GreaterThanExpression',
     '198': 'LessThanOrEqualExpression',
     '199': 'GreaterThanOrEqualExpression',
     '200': 'InstanceOfExpression',
     '201': 'InExpression',
     '202': 'LeftShiftExpression',
     '203': 'SignedRightShiftExpression',
     '204': 'UnsignedRightShiftExpression',
     '205': 'MultiplyExpression',
     '206': 'DivideExpression',
     '207': 'ModuloExpression',
     '208': 'AddExpression',
     '209': 'SubtractExpression',
     '210': 'PostIncrementExpression',
     '211': 'PostDecrementExpression',
     '212': 'MemberAccessExpression',
     '213': 'InvocationExpression',
     '214': 'ArrayLiteralExpression',
     '215': 'ObjectLiteralExpression',
     '216': 'ObjectCreationExpression',
     '217': 'ParenthesizedExpression',
     '218': 'ParenthesizedArrowFunctionExpression',
     '219': 'SimpleArrowFunctionExpression',
     '220': 'CastExpression',
     '221': 'ElementAccessExpression',
     '222': 'FunctionExpression',
     '223': 'OmittedExpression',
     '224': 'VariableDeclaration',
     '225': 'VariableDeclarator',
     '226': 'ArgumentList',
     '227': 'ParameterList',
     '228': 'TypeArgumentList',
     '229': 'TypeParameterList',
     '230': 'ExtendsHeritageClause',
     '231': 'ImplementsHeritageClause',
     '232': 'EqualsValueClause',
     '233': 'CaseSwitchClause',
     '234': 'DefaultSwitchClause',
     '235': 'ElseClause',
     '236': 'CatchClause',
     '237': 'FinallyClause',
     '238': 'TypeParameter',
     '239': 'Constraint',
     '240': 'SimplePropertyAssignment',
     '241': 'FunctionPropertyAssignment',
     '242': 'Parameter',
     '243': 'EnumElement',
     '244': 'TypeAnnotation',
     '245': 'ExternalModuleReference',
     '246': 'LastNode',
     None: 0,
     List: 1,
     SeparatedList: 2,
     TriviaList: 3,
     WhitespaceTrivia: 4,
     NewLineTrivia: 5,
     MultiLineCommentTrivia: 6,
     SingleLineCommentTrivia: 7,
     SkippedTokenTrivia: 8,
     ErrorToken: 9,
     EndOfFileToken: 10,
     IdentifierName: 11,
     RegularExpressionLiteral: 12,
     NumericLiteral: 13,
     StringLiteral: 14,
     BreakKeyword: 15,
     CaseKeyword: 16,
     CatchKeyword: 17,
     ContinueKeyword: 18,
     DebuggerKeyword: 19,
     DefaultKeyword: 20,
     DeleteKeyword: 21,
     DoKeyword: 22,
     ElseKeyword: 23,
     FalseKeyword: 24,
     FinallyKeyword: 25,
     ForKeyword: 26,
     FunctionKeyword: 27,
     IfKeyword: 28,
     InKeyword: 29,
     InstanceOfKeyword: 30,
     NewKeyword: 31,
     NullKeyword: 32,
     ReturnKeyword: 33,
     SwitchKeyword: 34,
     ThisKeyword: 35,
     ThrowKeyword: 36,
     TrueKeyword: 37,
     TryKeyword: 38,
     TypeOfKeyword: 39,
     VarKeyword: 40,
     VoidKeyword: 41,
     WhileKeyword: 42,
     WithKeyword: 43,
     ClassKeyword: 44,
     ConstKeyword: 45,
     EnumKeyword: 46,
     ExportKeyword: 47,
     ExtendsKeyword: 48,
     ImportKeyword: 49,
     SuperKeyword: 50,
     ImplementsKeyword: 51,
     InterfaceKeyword: 52,
     LetKeyword: 53,
     PackageKeyword: 54,
     PrivateKeyword: 55,
     ProtectedKeyword: 56,
     PublicKeyword: 57,
     StaticKeyword: 58,
     YieldKeyword: 59,
     AnyKeyword: 60,
     BooleanKeyword: 61,
     ConstructorKeyword: 62,
     DeclareKeyword: 63,
     GetKeyword: 64,
     ModuleKeyword: 65,
     RequireKeyword: 66,
     NumberKeyword: 67,
     SetKeyword: 68,
     StringKeyword: 69,
     OpenBraceToken: 70,
     CloseBraceToken: 71,
     OpenParenToken: 72,
     CloseParenToken: 73,
     OpenBracketToken: 74,
     CloseBracketToken: 75,
     DotToken: 76,
     DotDotDotToken: 77,
     SemicolonToken: 78,
     CommaToken: 79,
     LessThanToken: 80,
     GreaterThanToken: 81,
     LessThanEqualsToken: 82,
     GreaterThanEqualsToken: 83,
     EqualsEqualsToken: 84,
     EqualsGreaterThanToken: 85,
     ExclamationEqualsToken: 86,
     EqualsEqualsEqualsToken: 87,
     ExclamationEqualsEqualsToken: 88,
     PlusToken: 89,
     MinusToken: 90,
     AsteriskToken: 91,
     PercentToken: 92,
     PlusPlusToken: 93,
     MinusMinusToken: 94,
     LessThanLessThanToken: 95,
     GreaterThanGreaterThanToken: 96,
     GreaterThanGreaterThanGreaterThanToken: 97,
     AmpersandToken: 98,
     BarToken: 99,
     CaretToken: 100,
     ExclamationToken: 101,
     TildeToken: 102,
     AmpersandAmpersandToken: 103,
     BarBarToken: 104,
     QuestionToken: 105,
     ColonToken: 106,
     EqualsToken: 107,
     PlusEqualsToken: 108,
     MinusEqualsToken: 109,
     AsteriskEqualsToken: 110,
     PercentEqualsToken: 111,
     LessThanLessThanEqualsToken: 112,
     GreaterThanGreaterThanEqualsToken: 113,
     GreaterThanGreaterThanGreaterThanEqualsToken: 114,
     AmpersandEqualsToken: 115,
     BarEqualsToken: 116,
     CaretEqualsToken: 117,
     SlashToken: 118,
     SlashEqualsToken: 119,
     SourceUnit: 120,
     QualifiedName: 121,
     ObjectType: 122,
     FunctionType: 123,
     ArrayType: 124,
     ConstructorType: 125,
     GenericType: 126,
     TypeQuery: 127,
     InterfaceDeclaration: 128,
     FunctionDeclaration: 129,
     ModuleDeclaration: 130,
     ClassDeclaration: 131,
     EnumDeclaration: 132,
     ImportDeclaration: 133,
     ExportAssignment: 134,
     MemberFunctionDeclaration: 135,
     MemberVariableDeclaration: 136,
     ConstructorDeclaration: 137,
     IndexMemberDeclaration: 138,
     GetAccessor: 139,
     SetAccessor: 140,
     PropertySignature: 141,
     CallSignature: 142,
     ConstructSignature: 143,
     IndexSignature: 144,
     MethodSignature: 145,
     Block: 146,
     IfStatement: 147,
     VariableStatement: 148,
     ExpressionStatement: 149,
     ReturnStatement: 150,
     SwitchStatement: 151,
     BreakStatement: 152,
     ContinueStatement: 153,
     ForStatement: 154,
     ForInStatement: 155,
     EmptyStatement: 156,
     ThrowStatement: 157,
     WhileStatement: 158,
     TryStatement: 159,
     LabeledStatement: 160,
     DoStatement: 161,
     DebuggerStatement: 162,
     WithStatement: 163,
     PlusExpression: 164,
     NegateExpression: 165,
     BitwiseNotExpression: 166,
     LogicalNotExpression: 167,
     PreIncrementExpression: 168,
     PreDecrementExpression: 169,
     DeleteExpression: 170,
     TypeOfExpression: 171,
     VoidExpression: 172,
     CommaExpression: 173,
     AssignmentExpression: 174,
     AddAssignmentExpression: 175,
     SubtractAssignmentExpression: 176,
     MultiplyAssignmentExpression: 177,
     DivideAssignmentExpression: 178,
     ModuloAssignmentExpression: 179,
     AndAssignmentExpression: 180,
     ExclusiveOrAssignmentExpression: 181,
     OrAssignmentExpression: 182,
     LeftShiftAssignmentExpression: 183,
     SignedRightShiftAssignmentExpression: 184,
     UnsignedRightShiftAssignmentExpression: 185,
     ConditionalExpression: 186,
     LogicalOrExpression: 187,
     LogicalAndExpression: 188,
     BitwiseOrExpression: 189,
     BitwiseExclusiveOrExpression: 190,
     BitwiseAndExpression: 191,
     EqualsWithTypeConversionExpression: 192,
     NotEqualsWithTypeConversionExpression: 193,
     EqualsExpression: 194,
     NotEqualsExpression: 195,
     LessThanExpression: 196,
     GreaterThanExpression: 197,
     LessThanOrEqualExpression: 198,
     GreaterThanOrEqualExpression: 199,
     InstanceOfExpression: 200,
     InExpression: 201,
     LeftShiftExpression: 202,
     SignedRightShiftExpression: 203,
     UnsignedRightShiftExpression: 204,
     MultiplyExpression: 205,
     DivideExpression: 206,
     ModuloExpression: 207,
     AddExpression: 208,
     SubtractExpression: 209,
     PostIncrementExpression: 210,
     PostDecrementExpression: 211,
     MemberAccessExpression: 212,
     InvocationExpression: 213,
     ArrayLiteralExpression: 214,
     ObjectLiteralExpression: 215,
     ObjectCreationExpression: 216,
     ParenthesizedExpression: 217,
     ParenthesizedArrowFunctionExpression: 218,
     SimpleArrowFunctionExpression: 219,
     CastExpression: 220,
     ElementAccessExpression: 221,
     FunctionExpression: 222,
     OmittedExpression: 223,
     VariableDeclaration: 224,
     VariableDeclarator: 225,
     ArgumentList: 226,
     ParameterList: 227,
     TypeArgumentList: 228,
     TypeParameterList: 229,
     ExtendsHeritageClause: 230,
     ImplementsHeritageClause: 231,
     EqualsValueClause: 232,
     CaseSwitchClause: 233,
     DefaultSwitchClause: 234,
     ElseClause: 235,
     CatchClause: 236,
     FinallyClause: 237,
     TypeParameter: 238,
     Constraint: 239,
     SimplePropertyAssignment: 240,
     FunctionPropertyAssignment: 241,
     Parameter: 242,
     EnumElement: 243,
     TypeAnnotation: 244,
     ExternalModuleReference: 245,
     ModuleNameModuleReference: 246,
     FirstStandardKeyword: 15,
     LastStandardKeyword: 43,
     FirstFutureReservedKeyword: 44,
     LastFutureReservedKeyword: 50,
     FirstFutureReservedStrictKeyword: 51,
     LastFutureReservedStrictKeyword: 59,
     FirstTypeScriptKeyword: 60,
     LastTypeScriptKeyword: 69,
     FirstKeyword: 15,
     LastKeyword: 69,
     FirstToken: 9,
     LastToken: 119,
     FirstPunctuation: 70,
     LastPunctuation: 119,
     FirstFixedWidth: 15,
     LastFixedWidth: 119,
     FirstTrivia: 4,
     LastTrivia: 8,
     FirstNode: 120,
     LastNode: 246 },
  SyntaxFacts: 
   { getTokenKind: [Function: getTokenKind],
     getText: [Function: getText],
     isAnyKeyword: [Function: isAnyKeyword],
     isAnyPunctuation: [Function: isAnyPunctuation],
     isPrefixUnaryExpressionOperatorToken: [Function: isPrefixUnaryExpressionOperatorToken],
     isBinaryExpressionOperatorToken: [Function: isBinaryExpressionOperatorToken],
     getPrefixUnaryExpressionFromOperatorToken: [Function: getPrefixUnaryExpressionFromOperatorToken],
     getPostfixUnaryExpressionFromOperatorToken: [Function: getPostfixUnaryExpressionFromOperatorToken],
     getBinaryExpressionFromOperatorToken: [Function: getBinaryExpressionFromOperatorToken],
     getOperatorTokenFromBinaryExpression: [Function: getOperatorTokenFromBinaryExpression],
     isAssignmentOperatorToken: [Function: isAssignmentOperatorToken],
     isType: [Function: isType],
     isDirectivePrologueElement: [Function: isDirectivePrologueElement],
     isUseStrictDirective: [Function: isUseStrictDirective],
     isIdentifierNameOrAnyKeyword: [Function: isIdentifierNameOrAnyKeyword] },
  Scanner: 
   { isContextualToken: [Function: isContextualToken],
     createScanner: [Function: createScanner],
     isValidIdentifier: [Function: isValidIdentifier],
     createParserSource: [Function: createParserSource] },
  ScannerUtilities: { [Function: ScannerUtilities] identifierKind: [Function] },
  SlidingWindow: [Function: SlidingWindow],
  Syntax: 
   { _nextSyntaxID: 1,
     childIndex: [Function: childIndex],
     nodeHasSkippedOrMissingTokens: [Function: nodeHasSkippedOrMissingTokens],
     isUnterminatedStringLiteral: [Function: isUnterminatedStringLiteral],
     isUnterminatedMultilineCommentTrivia: [Function: isUnterminatedMultilineCommentTrivia],
     isEntirelyInsideCommentTrivia: [Function: isEntirelyInsideCommentTrivia],
     isEntirelyInsideComment: [Function: isEntirelyInsideComment],
     isEntirelyInStringOrRegularExpressionLiteral: [Function: isEntirelyInStringOrRegularExpressionLiteral],
     findSkippedTokenOnLeft: [Function: findSkippedTokenOnLeft],
     getAncestorOfKind: [Function: getAncestorOfKind],
     hasAncestorOfKind: [Function: hasAncestorOfKind],
     isIntegerLiteral: [Function: isIntegerLiteral],
     containingNode: [Function: containingNode],
     findTokenOnLeft: [Function: findTokenOnLeft],
     findCompleteTokenOnLeft: [Function: findCompleteTokenOnLeft],
     firstTokenInLineContainingPosition: [Function: firstTokenInLineContainingPosition],
     emptyList: [Function: emptyList],
     emptySeparatedList: [Function: emptySeparatedList],
     list: [Function: list],
     separatedList: [Function: separatedList],
     nonSeparatorIndexOf: [Function: nonSeparatorIndexOf],
     realizeToken: [Function: realizeToken],
     convertKeywordToIdentifier: [Function: convertKeywordToIdentifier],
     withLeadingTrivia: [Function: withLeadingTrivia],
     withTrailingTrivia: [Function: withTrailingTrivia],
     emptyToken: [Function: emptyToken],
     deferredTrivia: [Function: deferredTrivia],
     skippedTokenTrivia: [Function: skippedTokenTrivia],
     splitMultiLineCommentTriviaIntoMultipleLines: [Function: splitMultiLineCommentTriviaIntoMultipleLines],
     emptyTriviaList: {},
     triviaList: [Function: triviaList],
     Concrete: 
      { isConcrete: true,
        SourceUnitSyntax: [Function: SourceUnitSyntax],
        QualifiedNameSyntax: [Function: QualifiedNameSyntax],
        ObjectTypeSyntax: [Function: ObjectTypeSyntax],
        FunctionTypeSyntax: [Function: FunctionTypeSyntax],
        ArrayTypeSyntax: [Function: ArrayTypeSyntax],
        ConstructorTypeSyntax: [Function: ConstructorTypeSyntax],
        GenericTypeSyntax: [Function: GenericTypeSyntax],
        TypeQuerySyntax: [Function: TypeQuerySyntax],
        InterfaceDeclarationSyntax: [Function: InterfaceDeclarationSyntax],
        FunctionDeclarationSyntax: [Function: FunctionDeclarationSyntax],
        ModuleDeclarationSyntax: [Function: ModuleDeclarationSyntax],
        ClassDeclarationSyntax: [Function: ClassDeclarationSyntax],
        EnumDeclarationSyntax: [Function: EnumDeclarationSyntax],
        ImportDeclarationSyntax: [Function: ImportDeclarationSyntax],
        ExportAssignmentSyntax: [Function: ExportAssignmentSyntax],
        MemberFunctionDeclarationSyntax: [Function: MemberFunctionDeclarationSyntax],
        MemberVariableDeclarationSyntax: [Function: MemberVariableDeclarationSyntax],
        ConstructorDeclarationSyntax: [Function: ConstructorDeclarationSyntax],
        IndexMemberDeclarationSyntax: [Function: IndexMemberDeclarationSyntax],
        GetAccessorSyntax: [Function: GetAccessorSyntax],
        SetAccessorSyntax: [Function: SetAccessorSyntax],
        PropertySignatureSyntax: [Function: PropertySignatureSyntax],
        CallSignatureSyntax: [Function: CallSignatureSyntax],
        ConstructSignatureSyntax: [Function: ConstructSignatureSyntax],
        IndexSignatureSyntax: [Function: IndexSignatureSyntax],
        MethodSignatureSyntax: [Function: MethodSignatureSyntax],
        BlockSyntax: [Function: BlockSyntax],
        IfStatementSyntax: [Function: IfStatementSyntax],
        VariableStatementSyntax: [Function: VariableStatementSyntax],
        ExpressionStatementSyntax: [Function: ExpressionStatementSyntax],
        ReturnStatementSyntax: [Function: ReturnStatementSyntax],
        SwitchStatementSyntax: [Function: SwitchStatementSyntax],
        BreakStatementSyntax: [Function: BreakStatementSyntax],
        ContinueStatementSyntax: [Function: ContinueStatementSyntax],
        ForStatementSyntax: [Function: ForStatementSyntax],
        ForInStatementSyntax: [Function: ForInStatementSyntax],
        EmptyStatementSyntax: [Function: EmptyStatementSyntax],
        ThrowStatementSyntax: [Function: ThrowStatementSyntax],
        WhileStatementSyntax: [Function: WhileStatementSyntax],
        TryStatementSyntax: [Function: TryStatementSyntax],
        LabeledStatementSyntax: [Function: LabeledStatementSyntax],
        DoStatementSyntax: [Function: DoStatementSyntax],
        DebuggerStatementSyntax: [Function: DebuggerStatementSyntax],
        WithStatementSyntax: [Function: WithStatementSyntax],
        PrefixUnaryExpressionSyntax: [Function: PrefixUnaryExpressionSyntax],
        DeleteExpressionSyntax: [Function: DeleteExpressionSyntax],
        TypeOfExpressionSyntax: [Function: TypeOfExpressionSyntax],
        VoidExpressionSyntax: [Function: VoidExpressionSyntax],
        ConditionalExpressionSyntax: [Function: ConditionalExpressionSyntax],
        BinaryExpressionSyntax: [Function: BinaryExpressionSyntax],
        PostfixUnaryExpressionSyntax: [Function: PostfixUnaryExpressionSyntax],
        MemberAccessExpressionSyntax: [Function: MemberAccessExpressionSyntax],
        InvocationExpressionSyntax: [Function: InvocationExpressionSyntax],
        ArrayLiteralExpressionSyntax: [Function: ArrayLiteralExpressionSyntax],
        ObjectLiteralExpressionSyntax: [Function: ObjectLiteralExpressionSyntax],
        ObjectCreationExpressionSyntax: [Function: ObjectCreationExpressionSyntax],
        ParenthesizedExpressionSyntax: [Function: ParenthesizedExpressionSyntax],
        ParenthesizedArrowFunctionExpressionSyntax: [Function: ParenthesizedArrowFunctionExpressionSyntax],
        SimpleArrowFunctionExpressionSyntax: [Function: SimpleArrowFunctionExpressionSyntax],
        CastExpressionSyntax: [Function: CastExpressionSyntax],
        ElementAccessExpressionSyntax: [Function: ElementAccessExpressionSyntax],
        FunctionExpressionSyntax: [Function: FunctionExpressionSyntax],
        OmittedExpressionSyntax: [Function: OmittedExpressionSyntax],
        VariableDeclarationSyntax: [Function: VariableDeclarationSyntax],
        VariableDeclaratorSyntax: [Function: VariableDeclaratorSyntax],
        ArgumentListSyntax: [Function: ArgumentListSyntax],
        ParameterListSyntax: [Function: ParameterListSyntax],
        TypeArgumentListSyntax: [Function: TypeArgumentListSyntax],
        TypeParameterListSyntax: [Function: TypeParameterListSyntax],
        HeritageClauseSyntax: [Function: HeritageClauseSyntax],
        EqualsValueClauseSyntax: [Function: EqualsValueClauseSyntax],
        CaseSwitchClauseSyntax: [Function: CaseSwitchClauseSyntax],
        DefaultSwitchClauseSyntax: [Function: DefaultSwitchClauseSyntax],
        ElseClauseSyntax: [Function: ElseClauseSyntax],
        CatchClauseSyntax: [Function: CatchClauseSyntax],
        FinallyClauseSyntax: [Function: FinallyClauseSyntax],
        TypeParameterSyntax: [Function: TypeParameterSyntax],
        ConstraintSyntax: [Function: ConstraintSyntax],
        SimplePropertyAssignmentSyntax: [Function: SimplePropertyAssignmentSyntax],
        FunctionPropertyAssignmentSyntax: [Function: FunctionPropertyAssignmentSyntax],
        ParameterSyntax: [Function: ParameterSyntax],
        EnumElementSyntax: [Function: EnumElementSyntax],
        TypeAnnotationSyntax: [Function: TypeAnnotationSyntax],
        ExternalModuleReferenceSyntax: [Function: ExternalModuleReferenceSyntax],
        ModuleNameModuleReferenceSyntax: [Function: ModuleNameModuleReferenceSyntax] } },
  isShared: [Function: isShared],
  childCount: [Function: childCount],
  childAt: [Function: childAt],
  syntaxTree: [Function: syntaxTree],
  parsedInStrictMode: [Function: parsedInStrictMode],
  previousToken: [Function: previousToken],
  findToken: [Function: findToken],
  findSkippedTokenInPositionedToken: [Function: findSkippedTokenInPositionedToken],
  findSkippedTokenInLeadingTriviaList: [Function: findSkippedTokenInLeadingTriviaList],
  findSkippedTokenInTrailingTriviaList: [Function: findSkippedTokenInTrailingTriviaList],
  nextToken: [Function: nextToken],
  isNode: [Function: isNode],
  isToken: [Function: isToken],
  isList: [Function: isList],
  isSeparatedList: [Function: isSeparatedList],
  syntaxID: [Function: syntaxID],
  fullText: [Function: fullText],
  leadingTriviaWidth: [Function: leadingTriviaWidth],
  trailingTriviaWidth: [Function: trailingTriviaWidth],
  firstToken: [Function: firstToken],
  lastToken: [Function: lastToken],
  fullStart: [Function: fullStart],
  fullWidth: [Function: fullWidth],
  isIncrementallyUnusable: [Function: isIncrementallyUnusable],
  start: [Function: start],
  end: [Function: end],
  width: [Function: width],
  fullEnd: [Function: fullEnd],
  existsNewLineBetweenTokens: [Function: existsNewLineBetweenTokens],
  SyntaxNode: [Function: SyntaxNode],
  nodeMetadata: 
   [ [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [],
     [ 'moduleElements', 'endOfFileToken' ],
     [ 'left', 'dotToken', 'right' ],
     [ 'openBraceToken', 'typeMembers', 'closeBraceToken' ],
     [ 'typeParameterList',
       'parameterList',
       'equalsGreaterThanToken',
       'type' ],
     [ 'type', 'openBracketToken', 'closeBracketToken' ],
     [ 'newKeyword',
       'typeParameterList',
       'parameterList',
       'equalsGreaterThanToken',
       'type' ],
     [ 'name', 'typeArgumentList' ],
     [ 'typeOfKeyword', 'name' ],
     [ 'modifiers',
       'interfaceKeyword',
       'identifier',
       'typeParameterList',
       'heritageClauses',
       'body' ],
     [ 'modifiers',
       'functionKeyword',
       'identifier',
       'callSignature',
       'block',
       'semicolonToken' ],
     [ 'modifiers',
       'moduleKeyword',
       'name',
       'stringLiteral',
       'openBraceToken',
       'moduleElements',
       'closeBraceToken' ],
     [ 'modifiers',
       'classKeyword',
       'identifier',
       'typeParameterList',
       'heritageClauses',
       'openBraceToken',
       'classElements',
       'closeBraceToken' ],
     [ 'modifiers',
       'enumKeyword',
       'identifier',
       'openBraceToken',
       'enumElements',
       'closeBraceToken' ],
     [ 'modifiers',
       'importKeyword',
       'identifier',
       'equalsToken',
       'moduleReference',
       'semicolonToken' ],
     [ 'exportKeyword', 'equalsToken', 'identifier', 'semicolonToken' ],
     [ 'modifiers',
       'propertyName',
       'callSignature',
       'block',
       'semicolonToken' ],
     [ 'modifiers', 'variableDeclarator', 'semicolonToken' ],
     [ 'modifiers',
       'constructorKeyword',
       'callSignature',
       'block',
       'semicolonToken' ],
     [ 'modifiers', 'indexSignature', 'semicolonToken' ],
     [ 'modifiers',
       'getKeyword',
       'propertyName',
       'callSignature',
       'block' ],
     [ 'modifiers',
       'setKeyword',
       'propertyName',
       'callSignature',
       'block' ],
     [ 'propertyName', 'questionToken', 'typeAnnotation' ],
     [ 'typeParameterList', 'parameterList', 'typeAnnotation' ],
     [ 'newKeyword', 'callSignature' ],
     [ 'openBracketToken',
       'parameters',
       'closeBracketToken',
       'typeAnnotation' ],
     [ 'propertyName', 'questionToken', 'callSignature' ],
     [ 'openBraceToken', 'statements', 'closeBraceToken' ],
     [ 'ifKeyword',
       'openParenToken',
       'condition',
       'closeParenToken',
       'statement',
       'elseClause' ],
     [ 'modifiers', 'variableDeclaration', 'semicolonToken' ],
     [ 'expression', 'semicolonToken' ],
     [ 'returnKeyword', 'expression', 'semicolonToken' ],
     [ 'switchKeyword',
       'openParenToken',
       'expression',
       'closeParenToken',
       'openBraceToken',
       'switchClauses',
       'closeBraceToken' ],
     [ 'breakKeyword', 'identifier', 'semicolonToken' ],
     [ 'continueKeyword', 'identifier', 'semicolonToken' ],
     [ 'forKeyword',
       'openParenToken',
       'variableDeclaration',
       'initializer',
       'firstSemicolonToken',
       'condition',
       'secondSemicolonToken',
       'incrementor',
       'closeParenToken',
       'statement' ],
     [ 'forKeyword',
       'openParenToken',
       'variableDeclaration',
       'left',
       'inKeyword',
       'expression',
       'closeParenToken',
       'statement' ],
     [ 'semicolonToken' ],
     [ 'throwKeyword', 'expression', 'semicolonToken' ],
     [ 'whileKeyword',
       'openParenToken',
       'condition',
       'closeParenToken',
       'statement' ],
     [ 'tryKeyword', 'block', 'catchClause', 'finallyClause' ],
     [ 'identifier', 'colonToken', 'statement' ],
     [ 'doKeyword',
       'statement',
       'whileKeyword',
       'openParenToken',
       'condition',
       'closeParenToken',
       'semicolonToken' ],
     [ 'debuggerKeyword', 'semicolonToken' ],
     [ 'withKeyword',
       'openParenToken',
       'condition',
       'closeParenToken',
       'statement' ],
     [ 'operatorToken', 'operand' ],
     [ 'operatorToken', 'operand' ],
     [ 'operatorToken', 'operand' ],
     [ 'operatorToken', 'operand' ],
     [ 'operatorToken', 'operand' ],
     [ 'operatorToken', 'operand' ],
     [ 'deleteKeyword', 'expression' ],
     [ 'typeOfKeyword', 'expression' ],
     [ 'voidKeyword', 'expression' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'condition',
       'questionToken',
       'whenTrue',
       'colonToken',
       'whenFalse' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'left', 'operatorToken', 'right' ],
     [ 'operand', 'operatorToken' ],
     [ 'operand', 'operatorToken' ],
     [ 'expression', 'dotToken', 'name' ],
     [ 'expression', 'argumentList' ],
     [ 'openBracketToken', 'expressions', 'closeBracketToken' ],
     [ 'openBraceToken', 'propertyAssignments', 'closeBraceToken' ],
     [ 'newKeyword', 'expression', 'argumentList' ],
     [ 'openParenToken', 'expression', 'closeParenToken' ],
     [ 'callSignature',
       'equalsGreaterThanToken',
       'block',
       'expression' ],
     [ 'parameter', 'equalsGreaterThanToken', 'block', 'expression' ],
     [ 'lessThanToken', 'type', 'greaterThanToken', 'expression' ],
     [ 'expression',
       'openBracketToken',
       'argumentExpression',
       'closeBracketToken' ],
     [ 'functionKeyword', 'identifier', 'callSignature', 'block' ],
     [],
     [ 'varKeyword', 'variableDeclarators' ],
     [ 'propertyName', 'typeAnnotation', 'equalsValueClause' ],
     [ 'typeArgumentList',
       'openParenToken',
       'arguments',
       'closeParenToken' ],
     [ 'openParenToken', 'parameters', 'closeParenToken' ],
     [ 'lessThanToken', 'typeArguments', 'greaterThanToken' ],
     [ 'lessThanToken', 'typeParameters', 'greaterThanToken' ],
     [ 'extendsOrImplementsKeyword', 'typeNames' ],
     [ 'extendsOrImplementsKeyword', 'typeNames' ],
     [ 'equalsToken', 'value' ],
     [ 'caseKeyword', 'expression', 'colonToken', 'statements' ],
     [ 'defaultKeyword', 'colonToken', 'statements' ],
     [ 'elseKeyword', 'statement' ],
     [ 'catchKeyword',
       'openParenToken',
       'identifier',
       'typeAnnotation',
       'closeParenToken',
       'block' ],
     [ 'finallyKeyword', 'block' ],
     [ 'identifier', 'constraint' ],
     [ 'extendsKeyword', 'typeOrExpression' ],
     [ 'propertyName', 'colonToken', 'expression' ],
     [ 'propertyName', 'callSignature', 'block' ],
     [ 'dotDotDotToken',
       'modifiers',
       'identifier',
       'questionToken',
       'typeAnnotation',
       'equalsValueClause' ],
     [ 'propertyName', 'equalsValueClause' ],
     [ 'colonToken', 'type' ],
     [ 'requireKeyword',
       'openParenToken',
       'stringLiteral',
       'closeParenToken' ],
     [ 'moduleName' ] ],
  tokenValue: [Function: tokenValue],
  tokenValueText: [Function: tokenValueText],
  massageEscapes: [Function: massageEscapes],
  SyntaxUtilities: 
   { [Function: SyntaxUtilities]
     isAnyFunctionExpressionOrDeclaration: [Function],
     isLastTokenOnLine: [Function],
     isLeftHandSizeExpression: [Function],
     isExpression: [Function],
     isSwitchClause: [Function],
     isTypeMember: [Function],
     isClassElement: [Function],
     isModuleElement: [Function],
     isStatement: [Function],
     isAngleBracket: [Function],
     getToken: [Function],
     containsToken: [Function],
     hasExportKeyword: [Function],
     getExportKeyword: [Function],
     isAmbientDeclarationSyntax: [Function] },
  visitNodeOrToken: [Function: visitNodeOrToken],
  SyntaxWalker: [Function: SyntaxWalker],
  DepthLimitedWalker: [Function: DepthLimitedWalker],
  Parser: 
   { parse: [Function: parse],
     parseSource: [Function: parseSource],
     syntaxFactory: 
      { isConcrete: true,
        SourceUnitSyntax: [Function: SourceUnitSyntax],
        QualifiedNameSyntax: [Function: QualifiedNameSyntax],
        ObjectTypeSyntax: [Function: ObjectTypeSyntax],
        FunctionTypeSyntax: [Function: FunctionTypeSyntax],
        ArrayTypeSyntax: [Function: ArrayTypeSyntax],
        ConstructorTypeSyntax: [Function: ConstructorTypeSyntax],
        GenericTypeSyntax: [Function: GenericTypeSyntax],
        TypeQuerySyntax: [Function: TypeQuerySyntax],
        InterfaceDeclarationSyntax: [Function: InterfaceDeclarationSyntax],
        FunctionDeclarationSyntax: [Function: FunctionDeclarationSyntax],
        ModuleDeclarationSyntax: [Function: ModuleDeclarationSyntax],
        ClassDeclarationSyntax: [Function: ClassDeclarationSyntax],
        EnumDeclarationSyntax: [Function: EnumDeclarationSyntax],
        ImportDeclarationSyntax: [Function: ImportDeclarationSyntax],
        ExportAssignmentSyntax: [Function: ExportAssignmentSyntax],
        MemberFunctionDeclarationSyntax: [Function: MemberFunctionDeclarationSyntax],
        MemberVariableDeclarationSyntax: [Function: MemberVariableDeclarationSyntax],
        ConstructorDeclarationSyntax: [Function: ConstructorDeclarationSyntax],
        IndexMemberDeclarationSyntax: [Function: IndexMemberDeclarationSyntax],
        GetAccessorSyntax: [Function: GetAccessorSyntax],
        SetAccessorSyntax: [Function: SetAccessorSyntax],
        PropertySignatureSyntax: [Function: PropertySignatureSyntax],
        CallSignatureSyntax: [Function: CallSignatureSyntax],
        ConstructSignatureSyntax: [Function: ConstructSignatureSyntax],
        IndexSignatureSyntax: [Function: IndexSignatureSyntax],
        MethodSignatureSyntax: [Function: MethodSignatureSyntax],
        BlockSyntax: [Function: BlockSyntax],
        IfStatementSyntax: [Function: IfStatementSyntax],
        VariableStatementSyntax: [Function: VariableStatementSyntax],
        ExpressionStatementSyntax: [Function: ExpressionStatementSyntax],
        ReturnStatementSyntax: [Function: ReturnStatementSyntax],
        SwitchStatementSyntax: [Function: SwitchStatementSyntax],
        BreakStatementSyntax: [Function: BreakStatementSyntax],
        ContinueStatementSyntax: [Function: ContinueStatementSyntax],
        ForStatementSyntax: [Function: ForStatementSyntax],
        ForInStatementSyntax: [Function: ForInStatementSyntax],
        EmptyStatementSyntax: [Function: EmptyStatementSyntax],
        ThrowStatementSyntax: [Function: ThrowStatementSyntax],
        WhileStatementSyntax: [Function: WhileStatementSyntax],
        TryStatementSyntax: [Function: TryStatementSyntax],
        LabeledStatementSyntax: [Function: LabeledStatementSyntax],
        DoStatementSyntax: [Function: DoStatementSyntax],
        DebuggerStatementSyntax: [Function: DebuggerStatementSyntax],
        WithStatementSyntax: [Function: WithStatementSyntax],
        PrefixUnaryExpressionSyntax: [Function: PrefixUnaryExpressionSyntax],
        DeleteExpressionSyntax: [Function: DeleteExpressionSyntax],
        TypeOfExpressionSyntax: [Function: TypeOfExpressionSyntax],
        VoidExpressionSyntax: [Function: VoidExpressionSyntax],
        ConditionalExpressionSyntax: [Function: ConditionalExpressionSyntax],
        BinaryExpressionSyntax: [Function: BinaryExpressionSyntax],
        PostfixUnaryExpressionSyntax: [Function: PostfixUnaryExpressionSyntax],
        MemberAccessExpressionSyntax: [Function: MemberAccessExpressionSyntax],
        InvocationExpressionSyntax: [Function: InvocationExpressionSyntax],
        ArrayLiteralExpressionSyntax: [Function: ArrayLiteralExpressionSyntax],
        ObjectLiteralExpressionSyntax: [Function: ObjectLiteralExpressionSyntax],
        ObjectCreationExpressionSyntax: [Function: ObjectCreationExpressionSyntax],
        ParenthesizedExpressionSyntax: [Function: ParenthesizedExpressionSyntax],
        ParenthesizedArrowFunctionExpressionSyntax: [Function: ParenthesizedArrowFunctionExpressionSyntax],
        SimpleArrowFunctionExpressionSyntax: [Function: SimpleArrowFunctionExpressionSyntax],
        CastExpressionSyntax: [Function: CastExpressionSyntax],
        ElementAccessExpressionSyntax: [Function: ElementAccessExpressionSyntax],
        FunctionExpressionSyntax: [Function: FunctionExpressionSyntax],
        OmittedExpressionSyntax: [Function: OmittedExpressionSyntax],
        VariableDeclarationSyntax: [Function: VariableDeclarationSyntax],
        VariableDeclaratorSyntax: [Function: VariableDeclaratorSyntax],
        ArgumentListSyntax: [Function: ArgumentListSyntax],
        ParameterListSyntax: [Function: ParameterListSyntax],
        TypeArgumentListSyntax: [Function: TypeArgumentListSyntax],
        TypeParameterListSyntax: [Function: TypeParameterListSyntax],
        HeritageClauseSyntax: [Function: HeritageClauseSyntax],
        EqualsValueClauseSyntax: [Function: EqualsValueClauseSyntax],
        CaseSwitchClauseSyntax: [Function: CaseSwitchClauseSyntax],
        DefaultSwitchClauseSyntax: [Function: DefaultSwitchClauseSyntax],
        ElseClauseSyntax: [Function: ElseClauseSyntax],
        CatchClauseSyntax: [Function: CatchClauseSyntax],
        FinallyClauseSyntax: [Function: FinallyClauseSyntax],
        TypeParameterSyntax: [Function: TypeParameterSyntax],
        ConstraintSyntax: [Function: ConstraintSyntax],
        SimplePropertyAssignmentSyntax: [Function: SimplePropertyAssignmentSyntax],
        FunctionPropertyAssignmentSyntax: [Function: FunctionPropertyAssignmentSyntax],
        ParameterSyntax: [Function: ParameterSyntax],
        EnumElementSyntax: [Function: EnumElementSyntax],
        TypeAnnotationSyntax: [Function: TypeAnnotationSyntax],
        ExternalModuleReferenceSyntax: [Function: ExternalModuleReferenceSyntax],
        ModuleNameModuleReferenceSyntax: [Function: ModuleNameModuleReferenceSyntax] } },
  syntaxDiagnosticsTime: 0,
  SyntaxTree: [Function: SyntaxTree],
  externalModuleIndicatorSpan: [Function: externalModuleIndicatorSpan],
  externalModuleIndicatorSpanWorker: [Function: externalModuleIndicatorSpanWorker],
  Unicode: 
   { [Function: Unicode]
     lookupInUnicodeMap: [Function],
     isIdentifierStart: [Function],
     isIdentifierPart: [Function],
     unicodeES3IdentifierStart: 
      [ 170,
        170,
        181,
        181,
        186,
        186,
        192,
        214,
        216,
        246,
        248,
        543,
        546,
        563,
        592,
        685,
        688,
        696,
        699,
        705,
        720,
        721,
        736,
        740,
        750,
        750,
        890,
        890,
        902,
        902,
        904,
        906,
        908,
        908,
        910,
        929,
        931,
        974,
        976,
        983,
        986,
        1011,
        1024,
        1153,
        1164,
        1220,
        1223,
        1224,
        1227,
        1228,
        1232,
        1269,
        1272,
        1273,
        1329,
        1366,
        1369,
        1369,
        1377,
        1415,
        1488,
        1514,
        1520,
        1522,
        1569,
        1594,
        1600,
        1610,
        1649,
        1747,
        1749,
        1749,
        1765,
        1766,
        1786,
        1788,
        1808,
        1808,
        1810,
        1836,
        1920,
        1957,
        2309,
        2361,
        2365,
        2365,
        2384,
        2384,
        2392,
        2401,
        2437,
        2444,
        2447,
        2448,
        2451,
        2472,
        2474,
        2480,
        2482,
        2482,
        2486,
        2489,
        2524,
        2525,
        2527,
        2529,
        2544,
        2545,
        2565,
        2570,
        2575,
        2576,
        2579,
        2600,
        2602,
        2608,
        2610,
        2611,
        2613,
        2614,
        2616,
        2617,
        2649,
        2652,
        2654,
        2654,
        2674,
        2676,
        2693,
        2699,
        2701,
        2701,
        2703,
        2705,
        2707,
        2728,
        2730,
        2736,
        2738,
        2739,
        2741,
        2745,
        2749,
        2749,
        2768,
        2768,
        2784,
        2784,
        2821,
        2828,
        2831,
        2832,
        2835,
        2856,
        2858,
        2864,
        2866,
        2867,
        2870,
        2873,
        2877,
        2877,
        2908,
        2909,
        2911,
        2913,
        2949,
        2954,
        2958,
        2960,
        2962,
        2965,
        2969,
        2970,
        2972,
        2972,
        2974,
        2975,
        2979,
        2980,
        2984,
        2986,
        2990,
        2997,
        2999,
        3001,
        3077,
        3084,
        3086,
        3088,
        3090,
        3112,
        3114,
        3123,
        3125,
        3129,
        3168,
        3169,
        3205,
        3212,
        3214,
        3216,
        3218,
        3240,
        3242,
        3251,
        3253,
        3257,
        3294,
        3294,
        3296,
        3297,
        3333,
        3340,
        3342,
        3344,
        3346,
        3368,
        3370,
        3385,
        3424,
        3425,
        3461,
        3478,
        3482,
        3505,
        3507,
        3515,
        3517,
        3517,
        3520,
        3526,
        3585,
        3632,
        3634,
        3635,
        3648,
        3654,
        3713,
        3714,
        3716,
        3716,
        3719,
        3720,
        3722,
        3722,
        3725,
        3725,
        3732,
        3735,
        3737,
        3743,
        3745,
        3747,
        3749,
        3749,
        3751,
        3751,
        3754,
        3755,
        3757,
        3760,
        3762,
        3763,
        3773,
        3773,
        3776,
        3780,
        3782,
        3782,
        3804,
        3805,
        3840,
        3840,
        3904,
        3911,
        3913,
        3946,
        3976,
        3979,
        4096,
        4129,
        4131,
        4135,
        4137,
        4138,
        4176,
        4181,
        4256,
        4293,
        4304,
        4342,
        4352,
        4441,
        4447,
        4514,
        4520,
        4601,
        4608,
        4614,
        4616,
        4678,
        4680,
        4680,
        4682,
        4685,
        4688,
        4694,
        4696,
        4696,
        4698,
        4701,
        4704,
        4742,
        4744,
        4744,
        4746,
        4749,
        4752,
        4782,
        4784,
        4784,
        4786,
        4789,
        4792,
        4798,
        4800,
        4800,
        4802,
        4805,
        4808,
        4814,
        4816,
        4822,
        4824,
        4846,
        4848,
        4878,
        4880,
        4880,
        4882,
        4885,
        4888,
        4894,
        4896,
        4934,
        4936,
        4954,
        5024,
        5108,
        5121,
        5740,
        5743,
        5750,
        5761,
        5786,
        5792,
        5866,
        6016,
        6067,
        6176,
        6263,
        6272,
        6312,
        7680,
        7835,
        7840,
        7929,
        7936,
        7957,
        7960,
        7965,
        7968,
        8005,
        8008,
        8013,
        8016,
        8023,
        8025,
        8025,
        8027,
        8027,
        8029,
        8029,
        8031,
        8061,
        8064,
        8116,
        8118,
        8124,
        8126,
        8126,
        8130,
        8132,
        8134,
        8140,
        8144,
        8147,
        8150,
        8155,
        8160,
        8172,
        8178,
        8180,
        8182,
        8188,
        8319,
        8319,
        8450,
        8450,
        8455,
        8455,
        8458,
        8467,
        8469,
        8469,
        8473,
        8477,
        8484,
        8484,
        8486,
        8486,
        8488,
        8488,
        8490,
        8493,
        8495,
        8497,
        8499,
        8505,
        8544,
        8579,
        12293,
        12295,
        12321,
        12329,
        12337,
        12341,
        12344,
        12346,
        12353,
        12436,
        12445,
        12446,
        12449,
        12538,
        12540,
        12542,
        12549,
        12588,
        12593,
        12686,
        12704,
        12727,
        13312,
        19893,
        19968,
        40869,
        40960,
        42124,
        44032,
        55203,
        63744,
        64045,
        64256,
        64262,
        64275,
        64279,
        64285,
        64285,
        64287,
        64296,
        64298,
        64310,
        64312,
        64316,
        64318,
        64318,
        64320,
        64321,
        64323,
        64324,
        64326,
        64433,
        64467,
        64829,
        64848,
        64911,
        64914,
        64967,
        65008,
        65019,
        65136,
        65138,
        65140,
        65140,
        65142,
        65276,
        65313,
        65338,
        65345,
        65370,
        65382,
        65470,
        65474,
        65479,
        65482,
        65487,
        65490,
        65495,
        65498,
        65500 ],
     unicodeES3IdentifierPart: 
      [ 170,
        170,
        181,
        181,
        186,
        186,
        192,
        214,
        216,
        246,
        248,
        543,
        546,
        563,
        592,
        685,
        688,
        696,
        699,
        705,
        720,
        721,
        736,
        740,
        750,
        750,
        768,
        846,
        864,
        866,
        890,
        890,
        902,
        902,
        904,
        906,
        908,
        908,
        910,
        929,
        931,
        974,
        976,
        983,
        986,
        1011,
        1024,
        1153,
        1155,
        1158,
        1164,
        1220,
        1223,
        1224,
        1227,
        1228,
        1232,
        1269,
        1272,
        1273,
        1329,
        1366,
        1369,
        1369,
        1377,
        1415,
        1425,
        1441,
        1443,
        1465,
        1467,
        1469,
        1471,
        1471,
        1473,
        1474,
        1476,
        1476,
        1488,
        1514,
        1520,
        1522,
        1569,
        1594,
        1600,
        1621,
        1632,
        1641,
        1648,
        1747,
        1749,
        1756,
        1759,
        1768,
        1770,
        1773,
        1776,
        1788,
        1808,
        1836,
        1840,
        1866,
        1920,
        1968,
        2305,
        2307,
        2309,
        2361,
        2364,
        2381,
        2384,
        2388,
        2392,
        2403,
        2406,
        2415,
        2433,
        2435,
        2437,
        2444,
        2447,
        2448,
        2451,
        2472,
        2474,
        2480,
        2482,
        2482,
        2486,
        2489,
        2492,
        2492,
        2494,
        2500,
        2503,
        2504,
        2507,
        2509,
        2519,
        2519,
        2524,
        2525,
        2527,
        2531,
        2534,
        2545,
        2562,
        2562,
        2565,
        2570,
        2575,
        2576,
        2579,
        2600,
        2602,
        2608,
        2610,
        2611,
        2613,
        2614,
        2616,
        2617,
        2620,
        2620,
        2622,
        2626,
        2631,
        2632,
        2635,
        2637,
        2649,
        2652,
        2654,
        2654,
        2662,
        2676,
        2689,
        2691,
        2693,
        2699,
        2701,
        2701,
        2703,
        2705,
        2707,
        2728,
        2730,
        2736,
        2738,
        2739,
        2741,
        2745,
        2748,
        2757,
        2759,
        2761,
        2763,
        2765,
        2768,
        2768,
        2784,
        2784,
        2790,
        2799,
        2817,
        2819,
        2821,
        2828,
        2831,
        2832,
        2835,
        2856,
        2858,
        2864,
        2866,
        2867,
        2870,
        2873,
        2876,
        2883,
        2887,
        2888,
        2891,
        2893,
        2902,
        2903,
        2908,
        2909,
        2911,
        2913,
        2918,
        2927,
        2946,
        2947,
        2949,
        2954,
        2958,
        2960,
        2962,
        2965,
        2969,
        2970,
        2972,
        2972,
        2974,
        2975,
        2979,
        2980,
        2984,
        2986,
        2990,
        2997,
        2999,
        3001,
        3006,
        3010,
        3014,
        3016,
        3018,
        3021,
        3031,
        3031,
        3047,
        3055,
        3073,
        3075,
        3077,
        3084,
        3086,
        3088,
        3090,
        3112,
        3114,
        3123,
        3125,
        3129,
        3134,
        3140,
        3142,
        3144,
        3146,
        3149,
        3157,
        3158,
        3168,
        3169,
        3174,
        3183,
        3202,
        3203,
        3205,
        3212,
        3214,
        3216,
        3218,
        3240,
        3242,
        3251,
        3253,
        3257,
        3262,
        3268,
        3270,
        3272,
        3274,
        3277,
        3285,
        3286,
        3294,
        3294,
        3296,
        3297,
        3302,
        3311,
        3330,
        3331,
        3333,
        3340,
        3342,
        3344,
        3346,
        3368,
        3370,
        3385,
        3390,
        3395,
        3398,
        3400,
        3402,
        3405,
        3415,
        3415,
        3424,
        3425,
        3430,
        3439,
        3458,
        3459,
        3461,
        3478,
        3482,
        3505,
        3507,
        3515,
        3517,
        3517,
        3520,
        3526,
        3530,
        3530,
        3535,
        3540,
        3542,
        3542,
        3544,
        3551,
        3570,
        3571,
        3585,
        3642,
        3648,
        3662,
        3664,
        3673,
        3713,
        3714,
        3716,
        3716,
        3719,
        3720,
        3722,
        3722,
        3725,
        3725,
        3732,
        3735,
        3737,
        3743,
        3745,
        3747,
        3749,
        3749,
        3751,
        3751,
        3754,
        3755,
        3757,
        3769,
        3771,
        3773,
        3776,
        3780,
        3782,
        3782,
        3784,
        3789,
        3792,
        3801,
        3804,
        3805,
        3840,
        3840,
        3864,
        3865,
        3872,
        3881,
        3893,
        3893,
        3895,
        3895,
        3897,
        3897,
        3902,
        3911,
        3913,
        3946,
        3953,
        3972,
        3974,
        3979,
        3984,
        3991,
        3993,
        4028,
        4038,
        4038,
        4096,
        4129,
        4131,
        4135,
        4137,
        4138,
        4140,
        4146,
        4150,
        4153,
        4160,
        4169,
        4176,
        4185,
        4256,
        4293,
        4304,
        4342,
        4352,
        4441,
        4447,
        4514,
        4520,
        4601,
        4608,
        4614,
        4616,
        4678,
        4680,
        4680,
        4682,
        4685,
        4688,
        4694,
        4696,
        4696,
        4698,
        4701,
        4704,
        4742,
        4744,
        4744,
        4746,
        4749,
        4752,
        4782,
        4784,
        4784,
        4786,
        4789,
        4792,
        4798,
        4800,
        4800,
        4802,
        4805,
        4808,
        4814,
        4816,
        4822,
        4824,
        4846,
        4848,
        4878,
        4880,
        4880,
        4882,
        4885,
        4888,
        4894,
        4896,
        4934,
        4936,
        4954,
        4969,
        4977,
        5024,
        5108,
        5121,
        5740,
        5743,
        5750,
        5761,
        5786,
        5792,
        5866,
        6016,
        6099,
        6112,
        6121,
        6160,
        6169,
        6176,
        6263,
        6272,
        6313,
        7680,
        7835,
        7840,
        7929,
        7936,
        7957,
        7960,
        7965,
        7968,
        8005,
        8008,
        8013,
        8016,
        8023,
        8025,
        8025,
        8027,
        8027,
        8029,
        8029,
        8031,
        8061,
        8064,
        8116,
        8118,
        8124,
        8126,
        8126,
        8130,
        8132,
        8134,
        8140,
        8144,
        8147,
        8150,
        8155,
        8160,
        8172,
        8178,
        8180,
        8182,
        8188,
        8255,
        8256,
        8319,
        8319,
        8400,
        8412,
        8417,
        8417,
        8450,
        8450,
        8455,
        8455,
        8458,
        8467,
        8469,
        8469,
        8473,
        8477,
        8484,
        8484,
        8486,
        8486,
        8488,
        8488,
        8490,
        8493,
        8495,
        8497,
        8499,
        8505,
        8544,
        8579,
        12293,
        12295,
        12321,
        12335,
        12337,
        12341,
        12344,
        12346,
        12353,
        12436,
        12441,
        12442,
        12445,
        12446,
        12449,
        12542,
        12549,
        12588,
        12593,
        12686,
        12704,
        12727,
        13312,
        19893,
        19968,
        40869,
        40960,
        42124,
        44032,
        55203,
        63744,
        64045,
        64256,
        64262,
        64275,
        64279,
        64285,
        64296,
        64298,
        64310,
        64312,
        64316,
        64318,
        64318,
        64320,
        64321,
        64323,
        64324,
        64326,
        64433,
        64467,
        64829,
        64848,
        64911,
        64914,
        64967,
        65008,
        65019,
        65056,
        65059,
        65075,
        65076,
        65101,
        65103,
        65136,
        65138,
        65140,
        65140,
        65142,
        65276,
        65296,
        65305,
        65313,
        65338,
        65343,
        65343,
        65345,
        65370,
        65381,
        65470,
        65474,
        65479,
        65482,
        65487,
        65490,
        65495,
        65498,
        65500 ],
     unicodeES5IdentifierStart: 
      [ 170,
        170,
        181,
        181,
        186,
        186,
        192,
        214,
        216,
        246,
        248,
        705,
        710,
        721,
        736,
        740,
        748,
        748,
        750,
        750,
        880,
        884,
        886,
        887,
        890,
        893,
        902,
        902,
        904,
        906,
        908,
        908,
        910,
        929,
        931,
        1013,
        1015,
        1153,
        1162,
        1319,
        1329,
        1366,
        1369,
        1369,
        1377,
        1415,
        1488,
        1514,
        1520,
        1522,
        1568,
        1610,
        1646,
        1647,
        1649,
        1747,
        1749,
        1749,
        1765,
        1766,
        1774,
        1775,
        1786,
        1788,
        1791,
        1791,
        1808,
        1808,
        1810,
        1839,
        1869,
        1957,
        1969,
        1969,
        1994,
        2026,
        2036,
        2037,
        2042,
        2042,
        2048,
        2069,
        2074,
        2074,
        2084,
        2084,
        2088,
        2088,
        2112,
        2136,
        2208,
        2208,
        2210,
        2220,
        2308,
        2361,
        2365,
        2365,
        2384,
        2384,
        2392,
        2401,
        2417,
        2423,
        2425,
        2431,
        2437,
        2444,
        2447,
        2448,
        2451,
        2472,
        2474,
        2480,
        2482,
        2482,
        2486,
        2489,
        2493,
        2493,
        2510,
        2510,
        2524,
        2525,
        2527,
        2529,
        2544,
        2545,
        2565,
        2570,
        2575,
        2576,
        2579,
        2600,
        2602,
        2608,
        2610,
        2611,
        2613,
        2614,
        2616,
        2617,
        2649,
        2652,
        2654,
        2654,
        2674,
        2676,
        2693,
        2701,
        2703,
        2705,
        2707,
        2728,
        2730,
        2736,
        2738,
        2739,
        2741,
        2745,
        2749,
        2749,
        2768,
        2768,
        2784,
        2785,
        2821,
        2828,
        2831,
        2832,
        2835,
        2856,
        2858,
        2864,
        2866,
        2867,
        2869,
        2873,
        2877,
        2877,
        2908,
        2909,
        2911,
        2913,
        2929,
        2929,
        2947,
        2947,
        2949,
        2954,
        2958,
        2960,
        2962,
        2965,
        2969,
        2970,
        2972,
        2972,
        2974,
        2975,
        2979,
        2980,
        2984,
        2986,
        2990,
        3001,
        3024,
        3024,
        3077,
        3084,
        3086,
        3088,
        3090,
        3112,
        3114,
        3123,
        3125,
        3129,
        3133,
        3133,
        3160,
        3161,
        3168,
        3169,
        3205,
        3212,
        3214,
        3216,
        3218,
        3240,
        3242,
        3251,
        3253,
        3257,
        3261,
        3261,
        3294,
        3294,
        3296,
        3297,
        3313,
        3314,
        3333,
        3340,
        3342,
        3344,
        3346,
        3386,
        3389,
        3389,
        3406,
        3406,
        3424,
        3425,
        3450,
        3455,
        3461,
        3478,
        3482,
        3505,
        3507,
        3515,
        3517,
        3517,
        3520,
        3526,
        3585,
        3632,
        3634,
        3635,
        3648,
        3654,
        3713,
        3714,
        3716,
        3716,
        3719,
        3720,
        3722,
        3722,
        3725,
        3725,
        3732,
        3735,
        3737,
        3743,
        3745,
        3747,
        3749,
        3749,
        3751,
        3751,
        3754,
        3755,
        3757,
        3760,
        3762,
        3763,
        3773,
        3773,
        3776,
        3780,
        3782,
        3782,
        3804,
        3807,
        3840,
        3840,
        3904,
        3911,
        3913,
        3948,
        3976,
        3980,
        4096,
        4138,
        4159,
        4159,
        4176,
        4181,
        4186,
        4189,
        4193,
        4193,
        4197,
        4198,
        4206,
        4208,
        4213,
        4225,
        4238,
        4238,
        4256,
        4293,
        4295,
        4295,
        4301,
        4301,
        4304,
        4346,
        4348,
        4680,
        4682,
        4685,
        4688,
        4694,
        4696,
        4696,
        4698,
        4701,
        4704,
        4744,
        4746,
        4749,
        4752,
        4784,
        4786,
        4789,
        4792,
        4798,
        4800,
        4800,
        4802,
        4805,
        4808,
        4822,
        4824,
        4880,
        4882,
        4885,
        4888,
        4954,
        4992,
        5007,
        5024,
        5108,
        5121,
        5740,
        5743,
        5759,
        5761,
        5786,
        5792,
        5866,
        5870,
        5872,
        5888,
        5900,
        5902,
        5905,
        5920,
        5937,
        5952,
        5969,
        5984,
        5996,
        5998,
        6000,
        6016,
        6067,
        6103,
        6103,
        6108,
        6108,
        6176,
        6263,
        6272,
        6312,
        6314,
        6314,
        6320,
        6389,
        6400,
        6428,
        6480,
        6509,
        6512,
        6516,
        6528,
        6571,
        6593,
        6599,
        6656,
        6678,
        6688,
        6740,
        6823,
        6823,
        6917,
        6963,
        6981,
        6987,
        7043,
        7072,
        7086,
        7087,
        7098,
        7141,
        7168,
        7203,
        7245,
        7247,
        7258,
        7293,
        7401,
        7404,
        7406,
        7409,
        7413,
        7414,
        7424,
        7615,
        7680,
        7957,
        7960,
        7965,
        7968,
        8005,
        8008,
        8013,
        8016,
        8023,
        8025,
        8025,
        8027,
        8027,
        8029,
        8029,
        8031,
        8061,
        8064,
        8116,
        8118,
        8124,
        8126,
        8126,
        8130,
        8132,
        8134,
        8140,
        8144,
        8147,
        8150,
        8155,
        8160,
        8172,
        8178,
        8180,
        8182,
        8188,
        8305,
        8305,
        8319,
        8319,
        8336,
        8348,
        8450,
        8450,
        8455,
        8455,
        8458,
        8467,
        8469,
        8469,
        8473,
        8477,
        8484,
        8484,
        8486,
        8486,
        8488,
        8488,
        8490,
        8493,
        8495,
        8505,
        8508,
        8511,
        8517,
        8521,
        8526,
        8526,
        8544,
        8584,
        11264,
        11310,
        11312,
        11358,
        11360,
        11492,
        11499,
        11502,
        11506,
        11507,
        11520,
        11557,
        11559,
        11559,
        11565,
        11565,
        11568,
        11623,
        11631,
        11631,
        11648,
        11670,
        11680,
        11686,
        11688,
        11694,
        11696,
        11702,
        11704,
        11710,
        11712,
        11718,
        11720,
        11726,
        11728,
        11734,
        11736,
        11742,
        11823,
        11823,
        12293,
        12295,
        12321,
        12329,
        12337,
        12341,
        12344,
        12348,
        12353,
        12438,
        12445,
        12447,
        12449,
        12538,
        12540,
        12543,
        12549,
        12589,
        12593,
        12686,
        12704,
        12730,
        12784,
        12799,
        13312,
        19893,
        19968,
        40908,
        40960,
        42124,
        42192,
        42237,
        42240,
        42508,
        42512,
        42527,
        42538,
        42539,
        42560,
        42606,
        42623,
        42647,
        42656,
        42735,
        42775,
        42783,
        42786,
        42888,
        42891,
        42894,
        42896,
        42899,
        42912,
        42922,
        43000,
        43009,
        43011,
        43013,
        43015,
        43018,
        43020,
        43042,
        43072,
        43123,
        43138,
        43187,
        43250,
        43255,
        43259,
        43259,
        43274,
        43301,
        43312,
        43334,
        43360,
        43388,
        43396,
        43442,
        43471,
        43471,
        43520,
        43560,
        43584,
        43586,
        43588,
        43595,
        43616,
        43638,
        43642,
        43642,
        43648,
        43695,
        43697,
        43697,
        43701,
        43702,
        43705,
        43709,
        43712,
        43712,
        43714,
        43714,
        43739,
        43741,
        43744,
        43754,
        43762,
        43764,
        43777,
        43782,
        43785,
        43790,
        43793,
        43798,
        43808,
        43814,
        43816,
        43822,
        43968,
        44002,
        44032,
        55203,
        55216,
        55238,
        55243,
        55291,
        63744,
        64109,
        64112,
        64217,
        64256,
        64262,
        64275,
        64279,
        64285,
        64285,
        64287,
        64296,
        64298,
        64310,
        64312,
        64316,
        64318,
        64318,
        64320,
        64321,
        64323,
        64324,
        64326,
        64433,
        64467,
        64829,
        64848,
        64911,
        64914,
        64967,
        65008,
        65019,
        65136,
        65140,
        65142,
        65276,
        65313,
        65338,
        65345,
        65370,
        65382,
        65470,
        65474,
        65479,
        65482,
        65487,
        65490,
        65495,
        65498,
        65500 ],
     unicodeES5IdentifierPart: 
      [ 170,
        170,
        181,
        181,
        186,
        186,
        192,
        214,
        216,
        246,
        248,
        705,
        710,
        721,
        736,
        740,
        748,
        748,
        750,
        750,
        768,
        884,
        886,
        887,
        890,
        893,
        902,
        902,
        904,
        906,
        908,
        908,
        910,
        929,
        931,
        1013,
        1015,
        1153,
        1155,
        1159,
        1162,
        1319,
        1329,
        1366,
        1369,
        1369,
        1377,
        1415,
        1425,
        1469,
        1471,
        1471,
        1473,
        1474,
        1476,
        1477,
        1479,
        1479,
        1488,
        1514,
        1520,
        1522,
        1552,
        1562,
        1568,
        1641,
        1646,
        1747,
        1749,
        1756,
        1759,
        1768,
        1770,
        1788,
        1791,
        1791,
        1808,
        1866,
        1869,
        1969,
        1984,
        2037,
        2042,
        2042,
        2048,
        2093,
        2112,
        2139,
        2208,
        2208,
        2210,
        2220,
        2276,
        2302,
        2304,
        2403,
        2406,
        2415,
        2417,
        2423,
        2425,
        2431,
        2433,
        2435,
        2437,
        2444,
        2447,
        2448,
        2451,
        2472,
        2474,
        2480,
        2482,
        2482,
        2486,
        2489,
        2492,
        2500,
        2503,
        2504,
        2507,
        2510,
        2519,
        2519,
        2524,
        2525,
        2527,
        2531,
        2534,
        2545,
        2561,
        2563,
        2565,
        2570,
        2575,
        2576,
        2579,
        2600,
        2602,
        2608,
        2610,
        2611,
        2613,
        2614,
        2616,
        2617,
        2620,
        2620,
        2622,
        2626,
        2631,
        2632,
        2635,
        2637,
        2641,
        2641,
        2649,
        2652,
        2654,
        2654,
        2662,
        2677,
        2689,
        2691,
        2693,
        2701,
        2703,
        2705,
        2707,
        2728,
        2730,
        2736,
        2738,
        2739,
        2741,
        2745,
        2748,
        2757,
        2759,
        2761,
        2763,
        2765,
        2768,
        2768,
        2784,
        2787,
        2790,
        2799,
        2817,
        2819,
        2821,
        2828,
        2831,
        2832,
        2835,
        2856,
        2858,
        2864,
        2866,
        2867,
        2869,
        2873,
        2876,
        2884,
        2887,
        2888,
        2891,
        2893,
        2902,
        2903,
        2908,
        2909,
        2911,
        2915,
        2918,
        2927,
        2929,
        2929,
        2946,
        2947,
        2949,
        2954,
        2958,
        2960,
        2962,
        2965,
        2969,
        2970,
        2972,
        2972,
        2974,
        2975,
        2979,
        2980,
        2984,
        2986,
        2990,
        3001,
        3006,
        3010,
        3014,
        3016,
        3018,
        3021,
        3024,
        3024,
        3031,
        3031,
        3046,
        3055,
        3073,
        3075,
        3077,
        3084,
        3086,
        3088,
        3090,
        3112,
        3114,
        3123,
        3125,
        3129,
        3133,
        3140,
        3142,
        3144,
        3146,
        3149,
        3157,
        3158,
        3160,
        3161,
        3168,
        3171,
        3174,
        3183,
        3202,
        3203,
        3205,
        3212,
        3214,
        3216,
        3218,
        3240,
        3242,
        3251,
        3253,
        3257,
        3260,
        3268,
        3270,
        3272,
        3274,
        3277,
        3285,
        3286,
        3294,
        3294,
        3296,
        3299,
        3302,
        3311,
        3313,
        3314,
        3330,
        3331,
        3333,
        3340,
        3342,
        3344,
        3346,
        3386,
        3389,
        3396,
        3398,
        3400,
        3402,
        3406,
        3415,
        3415,
        3424,
        3427,
        3430,
        3439,
        3450,
        3455,
        3458,
        3459,
        3461,
        3478,
        3482,
        3505,
        3507,
        3515,
        3517,
        3517,
        3520,
        3526,
        3530,
        3530,
        3535,
        3540,
        3542,
        3542,
        3544,
        3551,
        3570,
        3571,
        3585,
        3642,
        3648,
        3662,
        3664,
        3673,
        3713,
        3714,
        3716,
        3716,
        3719,
        3720,
        3722,
        3722,
        3725,
        3725,
        3732,
        3735,
        3737,
        3743,
        3745,
        3747,
        3749,
        3749,
        3751,
        3751,
        3754,
        3755,
        3757,
        3769,
        3771,
        3773,
        3776,
        3780,
        3782,
        3782,
        3784,
        3789,
        3792,
        3801,
        3804,
        3807,
        3840,
        3840,
        3864,
        3865,
        3872,
        3881,
        3893,
        3893,
        3895,
        3895,
        3897,
        3897,
        3902,
        3911,
        3913,
        3948,
        3953,
        3972,
        3974,
        3991,
        3993,
        4028,
        4038,
        4038,
        4096,
        4169,
        4176,
        4253,
        4256,
        4293,
        4295,
        4295,
        4301,
        4301,
        4304,
        4346,
        4348,
        4680,
        4682,
        4685,
        4688,
        4694,
        4696,
        4696,
        4698,
        4701,
        4704,
        4744,
        4746,
        4749,
        4752,
        4784,
        4786,
        4789,
        4792,
        4798,
        4800,
        4800,
        4802,
        4805,
        4808,
        4822,
        4824,
        4880,
        4882,
        4885,
        4888,
        4954,
        4957,
        4959,
        4992,
        5007,
        5024,
        5108,
        5121,
        5740,
        5743,
        5759,
        5761,
        5786,
        5792,
        5866,
        5870,
        5872,
        5888,
        5900,
        5902,
        5908,
        5920,
        5940,
        5952,
        5971,
        5984,
        5996,
        5998,
        6000,
        6002,
        6003,
        6016,
        6099,
        6103,
        6103,
        6108,
        6109,
        6112,
        6121,
        6155,
        6157,
        6160,
        6169,
        6176,
        6263,
        6272,
        6314,
        6320,
        6389,
        6400,
        6428,
        6432,
        6443,
        6448,
        6459,
        6470,
        6509,
        6512,
        6516,
        6528,
        6571,
        6576,
        6601,
        6608,
        6617,
        6656,
        6683,
        6688,
        6750,
        6752,
        6780,
        6783,
        6793,
        6800,
        6809,
        6823,
        6823,
        6912,
        6987,
        6992,
        7001,
        7019,
        7027,
        7040,
        7155,
        7168,
        7223,
        7232,
        7241,
        7245,
        7293,
        7376,
        7378,
        7380,
        7414,
        7424,
        7654,
        7676,
        7957,
        7960,
        7965,
        7968,
        8005,
        8008,
        8013,
        8016,
        8023,
        8025,
        8025,
        8027,
        8027,
        8029,
        8029,
        8031,
        8061,
        8064,
        8116,
        8118,
        8124,
        8126,
        8126,
        8130,
        8132,
        8134,
        8140,
        8144,
        8147,
        8150,
        8155,
        8160,
        8172,
        8178,
        8180,
        8182,
        8188,
        8204,
        8205,
        8255,
        8256,
        8276,
        8276,
        8305,
        8305,
        8319,
        8319,
        8336,
        8348,
        8400,
        8412,
        8417,
        8417,
        8421,
        8432,
        8450,
        8450,
        8455,
        8455,
        8458,
        8467,
        8469,
        8469,
        8473,
        8477,
        8484,
        8484,
        8486,
        8486,
        8488,
        8488,
        8490,
        8493,
        8495,
        8505,
        8508,
        8511,
        8517,
        8521,
        8526,
        8526,
        8544,
        8584,
        11264,
        11310,
        11312,
        11358,
        11360,
        11492,
        11499,
        11507,
        11520,
        11557,
        11559,
        11559,
        11565,
        11565,
        11568,
        11623,
        11631,
        11631,
        11647,
        11670,
        11680,
        11686,
        11688,
        11694,
        11696,
        11702,
        11704,
        11710,
        11712,
        11718,
        11720,
        11726,
        11728,
        11734,
        11736,
        11742,
        11744,
        11775,
        11823,
        11823,
        12293,
        12295,
        12321,
        12335,
        12337,
        12341,
        12344,
        12348,
        12353,
        12438,
        12441,
        12442,
        12445,
        12447,
        12449,
        12538,
        12540,
        12543,
        12549,
        12589,
        12593,
        12686,
        12704,
        12730,
        12784,
        12799,
        13312,
        19893,
        19968,
        40908,
        40960,
        42124,
        42192,
        42237,
        42240,
        42508,
        42512,
        42539,
        42560,
        42607,
        42612,
        42621,
        42623,
        42647,
        42655,
        42737,
        42775,
        42783,
        42786,
        42888,
        42891,
        42894,
        42896,
        42899,
        42912,
        42922,
        43000,
        43047,
        43072,
        43123,
        43136,
        43204,
        43216,
        43225,
        43232,
        43255,
        43259,
        43259,
        43264,
        43309,
        43312,
        43347,
        43360,
        43388,
        43392,
        43456,
        43471,
        43481,
        43520,
        43574,
        43584,
        43597,
        43600,
        43609,
        43616,
        43638,
        43642,
        43643,
        43648,
        43714,
        43739,
        43741,
        43744,
        43759,
        43762,
        43766,
        43777,
        43782,
        43785,
        43790,
        43793,
        43798,
        43808,
        43814,
        43816,
        43822,
        43968,
        44010,
        44012,
        44013,
        44016,
        44025,
        44032,
        55203,
        55216,
        55238,
        55243,
        55291,
        63744,
        64109,
        64112,
        64217,
        64256,
        64262,
        64275,
        64279,
        64285,
        64296,
        64298,
        64310,
        64312,
        64316,
        64318,
        64318,
        64320,
        64321,
        64323,
        64324,
        64326,
        64433,
        64467,
        64829,
        64848,
        64911,
        64914,
        64967,
        65008,
        65019,
        65024,
        65039,
        65056,
        65062,
        65075,
        65076,
        65101,
        65103,
        65136,
        65140,
        65142,
        65276,
        65296,
        65305,
        65313,
        65338,
        65343,
        65343,
        65345,
        65370,
        65382,
        65470,
        65474,
        65479,
        65482,
        65487,
        65490,
        65495,
        65498,
        65500 ] },
  IncrementalParser: { parse: [Function: parse] },
  Services: 
   { NavigationBarItemGetter: [Function: NavigationBarItemGetter],
     BraceMatcher: { [Function: BraceMatcher] getMatchSpans: [Function], getMatchingTokenKind: [Function] },
     Breakpoints: { getBreakpointLocation: [Function: getBreakpointLocation] },
     Formatting: 
      { TextSnapshot: [Function: TextSnapshot],
        TextSnapshotLine: [Function: TextSnapshotLine],
        SnapshotPoint: [Function: SnapshotPoint],
        FormattingContext: [Function: FormattingContext],
        FormattingManager: [Function: FormattingManager],
        FormattingRequestKind: [Object],
        Rule: [Function: Rule],
        RuleAction: [Object],
        RuleDescriptor: [Object],
        RuleFlags: [Object],
        RuleOperation: [Object],
        RuleOperationContext: [Object],
        Rules: [Object],
        RulesMap: [Object],
        RulesPosition: [Object],
        RulesBucketConstructionState: [Function: RulesBucketConstructionState],
        RulesBucket: [Function: RulesBucket],
        RulesProvider: [Function: RulesProvider],
        TextEditInfo: [Function: TextEditInfo],
        Shared: [Object],
        TokenSpan: [Object],
        IndentationNodeContext: [Function: IndentationNodeContext],
        IndentationNodeContextPool: [Function: IndentationNodeContextPool],
        IndentationTrackingWalker: [Function: IndentationTrackingWalker],
        MultipleTokenIndenter: [Function: MultipleTokenIndenter],
        SingleTokenIndenter: [Object],
        Formatter: [Object] },
     TypeScriptServicesFactory: [Function: TypeScriptServicesFactory] },
  Indentation: 
   { columnForEndOfTokenAtPosition: [Function: columnForEndOfTokenAtPosition],
     columnForStartOfTokenAtPosition: [Function: columnForStartOfTokenAtPosition],
     columnForStartOfFirstTokenInLineContainingPosition: [Function: columnForStartOfFirstTokenInLineContainingPosition],
     columnForPositionInString: [Function: columnForPositionInString],
     indentationString: [Function: indentationString],
     firstNonWhitespacePosition: [Function: firstNonWhitespacePosition] },
  NullLogger: [Function: NullLogger],
  createIntrinsicsObject: [Function: createIntrinsicsObject],
  Comment: [Function: Comment],
  AstWalkOptions: [Function: AstWalkOptions],
  AstWalkerFactory: [Function: AstWalkerFactory],
  getAstWalkerFactory: [Function: getAstWalkerFactory],
  ASTHelpers: 
   { isValidAstNode: [Function: isValidAstNode],
     isValidSpan: [Function: isValidSpan],
     getAstAtPosition: [Function: getAstAtPosition],
     getExtendsHeritageClause: [Function: getExtendsHeritageClause],
     getImplementsHeritageClause: [Function: getImplementsHeritageClause],
     isCallExpression: [Function: isCallExpression],
     isCallExpressionTarget: [Function: isCallExpressionTarget],
     getCallExpressionTarget: [Function: getCallExpressionTarget],
     isDeclarationASTOrDeclarationNameAST: [Function: isDeclarationASTOrDeclarationNameAST],
     getEnclosingParameterForInitializer: [Function: getEnclosingParameterForInitializer],
     getEnclosingMemberDeclaration: [Function: getEnclosingMemberDeclaration],
     isNameOfFunction: [Function: isNameOfFunction],
     isNameOfMemberFunction: [Function: isNameOfMemberFunction],
     isNameOfMemberAccessExpression: [Function: isNameOfMemberAccessExpression],
     isRightSideOfQualifiedName: [Function: isRightSideOfQualifiedName],
     parentIsModuleDeclaration: [Function: parentIsModuleDeclaration],
     isDeclarationAST: [Function: isDeclarationAST],
     preComments: [Function: preComments],
     postComments: [Function: postComments],
     convertTokenLeadingComments: [Function: convertTokenLeadingComments],
     convertTokenTrailingComments: [Function: convertTokenTrailingComments],
     docComments: [Function: docComments],
     isDocComment: [Function: isDocComment],
     getParameterList: [Function: getParameterList],
     getType: [Function: getType],
     getVariableDeclaratorModifiers: [Function: getVariableDeclaratorModifiers],
     isIntegerLiteralAST: [Function: isIntegerLiteralAST],
     getEnclosingModuleDeclaration: [Function: getEnclosingModuleDeclaration],
     getModuleDeclarationFromNameAST: [Function: getModuleDeclarationFromNameAST],
     isLastNameOfModule: [Function: isLastNameOfModule],
     getNameOfIdentifierOrQualifiedName: [Function: getNameOfIdentifierOrQualifiedName],
     getModuleNames: [Function: getModuleNames] },
  MemberName: { [Function: MemberName] memberNameToString: [Function], create: [Function] },
  MemberNameString: { [Function: MemberNameString] memberNameToString: [Function], create: [Function] },
  MemberNameArray: { [Function: MemberNameArray] memberNameToString: [Function], create: [Function] },
  stripStartAndEndQuotes: [Function: stripStartAndEndQuotes],
  isSingleQuoted: [Function: isSingleQuoted],
  isDoubleQuoted: [Function: isDoubleQuoted],
  isQuoted: [Function: isQuoted],
  quoteStr: [Function: quoteStr],
  switchToForwardSlashes: [Function: switchToForwardSlashes],
  trimModName: [Function: trimModName],
  getDeclareFilePath: [Function: getDeclareFilePath],
  isTSFile: [Function: isTSFile],
  isDTSFile: [Function: isDTSFile],
  getPrettyName: [Function: getPrettyName],
  getPathComponents: [Function: getPathComponents],
  getRelativePathToFixedPath: [Function: getRelativePathToFixedPath],
  changePathToDTS: [Function: changePathToDTS],
  isRelative: [Function: isRelative],
  isRooted: [Function: isRooted],
  getRootFilePath: [Function: getRootFilePath],
  filePathComponents: [Function: filePathComponents],
  filePath: [Function: filePath],
  convertToDirectoryPath: [Function: convertToDirectoryPath],
  normalizePath: [Function: normalizePath],
  tripleSlashReferenceRegExp: /^(\/\/\/\s*<reference\s+path=)('|")(.+?)\2\s*(static=('|")(.+?)\5\s*)*\/>/,
  preProcessFile: [Function: preProcessFile],
  getReferencedFiles: [Function: getReferencedFiles] }
